{"version":3,"sources":["polyfills.js","form-render.js","kc-toggle.js","form-render.min.js","utils.js"],"names":["FormRenderFn","options","element","utils","fbUtils","formRender","this","defaults","destroyTemplate","container","dataType","formData","messages","formRendered","noFormData","other","selectColor","onRender","render","notify","error","message","console","success","log","warning","warn","opts","$","extend","setData","xml","parseXML","json","window","JSON","parse","Element","prototype","appendFormFields","fields","forEach","field","appendChild","emptyContainer","lastChild","removeChild","runCallbacks","santizeField","sanitizedField","Object","assign","className","values","map","option","trimObj","rendered","i","length","push","fieldRender","renderedFormWrap","markup","jQuery","elem","innerHTML","join","noData","remove","parentNode","Event","evt","event","document","createEvent","initEvent","target","TypeError","index","arguments","source","key","hasOwnProperty","call","Toggle","theme","off","on","$kcToggle","insertAfter","append","toggleClass","is","kctOn","kctOff","kctHandle","kctInner","click","attr","fn","kcToggle","toggle","each","data","_typeof","Symbol","iterator","obj","constructor","inArray","needle","haystack","indexOf","attrs","xmlRemove","undefined","Array","isArray","validAttr","invalid","attrString","attributes","safeAttr","name","value","safeAttrName","valString","escapeAttr","toString","replace","trim","hyphenCase","str","$1","toLowerCase","camelCase","m","w","toUpperCase","tag","content","contentType","createElement","getContentType","appendContent","string","object","array","setAttribute","parseAttrs","attrVal","match","parseOptions","getElementsByTagName","optionData","label","textContent","xmlString","parser","DOMParser","parseFromString","fieldData","nodeChildren","children","escapeHtml","html","escapeElement","replaceTag","\"","&","<",">","escapeAttrs","callback","scope","unique","filter","pos","arr","preview","fieldMarkup","fieldLabel","optionsMarkup","fieldLabelText","fieldDesc","description","fieldRequired","fieldOptions","id","multiple","type","subtype","required","fieldLabelVal","fieldDataString","fieldVal","optionAttrsString","placeholder","selected","optionAttrs","checked","otherOptionAttrs","onclick","setTimeout","getElementById","otherOptionCB","otherId","otherInput","otherInputValue","style","display","capitalize"],"mappings":"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","file":"form-render.min.js","sourcesContent":["'use strict';\n\n// Element.remove() polyfill\nif (!('remove' in Element.prototype)) {\n  Element.prototype.remove = function() {\n    if (this.parentNode) {\n      this.parentNode.removeChild(this);\n    }\n  };\n}\n\n// Event polyfill\nif (typeof Event !== 'function') {\n  (function() {\n    window.Event = function(evt) {\n      var event = document.createEvent('Event');\n      event.initEvent(evt, true, true);\n      return event;\n    };\n  })();\n}\n\n// Object.assign polyfill\nif (typeof Object.assign != 'function') {\n  Object.assign = function(target) {\n    'use strict';\n    if (target == null) {\n      throw new TypeError('Cannot convert undefined or null to object');\n    }\n\n    target = Object(target);\n    for (var index = 1; index < arguments.length; index++) {\n      var source = arguments[index];\n      if (source != null) {\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n    }\n    return target;\n  };\n}\n","'use strict';\n\n// render the formBuilder XML into html\nfunction FormRenderFn(options, element) {\n\n  var utils = fbUtils;\n\n  var formRender = this,\n    defaults = {\n      destroyTemplate: true, // @todo\n      container: false,\n      dataType: 'xml',\n      formData: false,\n      messages: {\n        formRendered: 'Form Rendered',\n        noFormData: 'No form data.',\n        other: 'Other',\n        selectColor: 'Select Color'\n      },\n      onRender: () => {},\n      render: true,\n      notify: {\n        error: function(message) {\n          return console.error(message);\n        },\n        success: function(message) {\n          return console.log(message);\n        },\n        warning: function(message) {\n          return console.warn(message);\n        }\n      }\n    };\n\n  var opts = $.extend(true, defaults, options);\n\n  (function() {\n    if (!opts.formData) {\n      return false;\n    }\n\n    let setData = {\n      xml: formData => utils.parseXML(formData),\n      json: formData => window.JSON.parse(formData)\n    };\n\n    opts.formData = setData[opts.dataType](opts.formData) || false;\n  })();\n\n  /**\n   * Extend Element prototype to allow us to append fields\n   *\n   * @param  {Object} fields Node elements\n   */\n  Element.prototype.appendFormFields = function(fields) {\n    var element = this;\n    fields.forEach(field => element.appendChild(field));\n  };\n\n  /**\n   * Extend Element prototype to remove content\n   */\n  Element.prototype.emptyContainer = function() {\n    var element = this;\n    while (element.lastChild) {\n      element.removeChild(element.lastChild);\n    }\n  };\n\n  var runCallbacks = function() {\n    if (opts.onRender) {\n      opts.onRender();\n    }\n  };\n\n  var santizeField = (field) => {\n    let sanitizedField = Object.assign({}, field);\n    sanitizedField.className = field.className || field.class || null;\n    delete sanitizedField.class;\n\n    if (field.values) {\n      field.values = field.values.map(option => utils.trimObj(option));\n    }\n\n    return utils.trimObj(sanitizedField);\n  };\n\n  // Begin the core plugin\n  var rendered = [];\n\n  // generate field markup if we have fields\n  if (opts.formData) {\n    for (var i = 0; i < opts.formData.length; i++) {\n      let sanitizedField = santizeField(opts.formData[i]);\n      rendered.push(utils.fieldRender(sanitizedField, opts));\n    }\n\n    if (opts.render) {\n      if (opts.container) {\n        let renderedFormWrap = utils.markup('div', rendered, {className: 'rendered-form'});\n        opts.container = (opts.container instanceof jQuery) ? opts.container[0] : opts.container;\n        opts.container.emptyContainer();\n        opts.container.appendChild(renderedFormWrap);\n      } else if (element) {\n        element.emptyContainer();\n        element.appendFormFields(rendered);\n      }\n\n      runCallbacks();\n      opts.notify.success(opts.messages.formRendered);\n    } else {\n      formRender.markup = rendered.map(function(elem) {\n        return elem.innerHTML;\n      }).join('');\n    }\n  } else {\n    let noData = utils.markup('div', opts.messages.noFormData, {\n      className: 'no-form-data'\n    });\n    rendered.push(noData);\n    opts.notify.error(opts.messages.noFormData);\n  }\n\n  return formRender;\n}\n\n(function($) {\n\n  $.fn.formRender = function(options) {\n    this.each(function() {\n      let formRender = new FormRenderFn(options, this);\n      return formRender;\n    });\n  };\n\n})(jQuery);\n","(function($) {\n  'use strict';\n\n  var Toggle = function(element, options) {\n\n    var defaults = {\n      theme: 'fresh',\n      messages: {\n        off: 'Off',\n        on: 'On'\n      }\n    };\n\n    var opts = $.extend(defaults, options),\n      $kcToggle = $('<div class=\"kc-toggle\"/>').insertAfter(element).append(element);\n\n    $kcToggle.toggleClass('on', element.is(':checked'));\n\n    var kctOn = `<div class=\"kct-on\">${opts.messages.on}</div>`,\n        kctOff = `<div class=\"kct-off\">${opts.messages.off}</div>`,\n        kctHandle = '<div class=\"kct-handle\"></div>',\n        kctInner = `<div class=\"kct-inner\">${kctOn}${kctHandle}${kctOff}</div>`;\n\n    $kcToggle.append(kctInner);\n\n    $kcToggle.click(function() {\n      element.attr('checked', !element.attr('checked'));\n      $(this).toggleClass('on');\n    });\n\n  };\n\n  $.fn.kcToggle = function(options) {\n    var toggle = this;\n    return toggle.each(function() {\n      var element = $(this);\n      if (element.data('kcToggle')) {\n        return;\n      }\n      var kcToggle = new Toggle(element, options);\n      element.data('kcToggle', kcToggle);\n    });\n  };\n\n})(jQuery);\n","'use strict';\n\n// Element.remove() polyfill\n\nif (!('remove' in Element.prototype)) {\n  Element.prototype.remove = function () {\n    if (this.parentNode) {\n      this.parentNode.removeChild(this);\n    }\n  };\n}\n\n// Event polyfill\nif (typeof Event !== 'function') {\n  (function () {\n    window.Event = function (evt) {\n      var event = document.createEvent('Event');\n      event.initEvent(evt, true, true);\n      return event;\n    };\n  })();\n}\n\n// Object.assign polyfill\nif (typeof Object.assign != 'function') {\n  Object.assign = function (target) {\n    'use strict';\n\n    if (target == null) {\n      throw new TypeError('Cannot convert undefined or null to object');\n    }\n\n    target = Object(target);\n    for (var index = 1; index < arguments.length; index++) {\n      var source = arguments[index];\n      if (source != null) {\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n    }\n    return target;\n  };\n}\n'use strict';\n\n(function ($) {\n  'use strict';\n\n  var Toggle = function Toggle(element, options) {\n\n    var defaults = {\n      theme: 'fresh',\n      messages: {\n        off: 'Off',\n        on: 'On'\n      }\n    };\n\n    var opts = $.extend(defaults, options),\n        $kcToggle = $('<div class=\"kc-toggle\"/>').insertAfter(element).append(element);\n\n    $kcToggle.toggleClass('on', element.is(':checked'));\n\n    var kctOn = '<div class=\"kct-on\">' + opts.messages.on + '</div>',\n        kctOff = '<div class=\"kct-off\">' + opts.messages.off + '</div>',\n        kctHandle = '<div class=\"kct-handle\"></div>',\n        kctInner = '<div class=\"kct-inner\">' + kctOn + kctHandle + kctOff + '</div>';\n\n    $kcToggle.append(kctInner);\n\n    $kcToggle.click(function () {\n      element.attr('checked', !element.attr('checked'));\n      $(this).toggleClass('on');\n    });\n  };\n\n  $.fn.kcToggle = function (options) {\n    var toggle = this;\n    return toggle.each(function () {\n      var element = $(this);\n      if (element.data('kcToggle')) {\n        return;\n      }\n      var kcToggle = new Toggle(element, options);\n      element.data('kcToggle', kcToggle);\n    });\n  };\n})(jQuery);\n'use strict';\n/**\n *\n */\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar fbUtils = {};\n\n// cleaner syntax for testing indexOf element\nfbUtils.inArray = function (needle, haystack) {\n  return haystack.indexOf(needle) !== -1;\n};\n\n/**\n * Remove null or undefined values\n * @param  {Object} attrs {attrName: attrValue}\n * @return {Object}       Object trimmed of null or undefined values\n */\nfbUtils.trimObj = function (attrs) {\n  var xmlRemove = [null, undefined, '', false, 'false'];\n  for (var attr in attrs) {\n    if (fbUtils.inArray(attrs[attr], xmlRemove)) {\n      delete attrs[attr];\n    } else if (Array.isArray(attrs[attr])) {\n      if (!attrs[attr].length) {\n        delete attrs[attr];\n      }\n    }\n  }\n\n  return attrs;\n};\n\n/**\n * Test if attribute is a valid HTML attribute\n * @param  {String} attr\n * @return {Boolean}\n */\nfbUtils.validAttr = function (attr) {\n  var invalid = ['values', 'enableOther', 'other', 'label',\n  // 'style',\n  'subtype'];\n  return !fbUtils.inArray(attr, invalid);\n};\n\n/**\n * Convert an attrs object into a string\n *\n * @param  {Object} attrs object of attributes for markup\n * @return {string}\n */\nfbUtils.attrString = function (attrs) {\n  var attributes = [];\n\n  for (var attr in attrs) {\n    if (attrs.hasOwnProperty(attr) && fbUtils.validAttr(attr)) {\n      attr = fbUtils.safeAttr(attr, attrs[attr]);\n      attributes.push(attr.name + attr.value);\n    }\n  }\n  return attributes.join(' ');\n};\n\n/**\n * Convert attributes to markup safe strings\n * @param  {String} name  attribute name\n * @param  {String} value attribute value\n * @return {Object}       {attrName: attrValue}\n */\nfbUtils.safeAttr = function (name, value) {\n  name = fbUtils.safeAttrName(name);\n  var valString = void 0;\n\n  if (value) {\n    if (Array.isArray(value)) {\n      valString = fbUtils.escapeAttr(value.join(' '));\n    } else {\n      if (typeof value === 'boolean') {\n        value = value.toString();\n      }\n      valString = fbUtils.escapeAttr(value.replace(',', ' ').trim());\n    }\n  }\n\n  value = value ? '=\"' + valString + '\"' : '';\n  return {\n    name: name,\n    value: value\n  };\n};\n\nfbUtils.safeAttrName = function (name) {\n  var safeAttr = {\n    className: 'class'\n  };\n\n  return safeAttr[name] || fbUtils.hyphenCase(name);\n};\n\n/**\n * Convert strings into lowercase-hyphen\n *\n * @param  {String} str\n * @return {String}\n */\nfbUtils.hyphenCase = function (str) {\n  str = str.replace(/[^\\w\\s\\-]/gi, '');\n  str = str.replace(/([A-Z])/g, function ($1) {\n    return '-' + $1.toLowerCase();\n  });\n\n  return str.replace(/\\s/g, '-').replace(/^-+/g, '');\n};\n\n/**\n * convert a hyphenated string to camelCase\n * @param  {String} str\n * @return {String}\n */\nfbUtils.camelCase = function (str) {\n  return str.replace(/-([a-z])/g, function (m, w) {\n    return w.toUpperCase();\n  });\n};\n\n/**\n * Generate markup wrapper where needed\n *\n * @param  {string}              tag\n * @param  {String|Array|Object} content we wrap this\n * @param  {Object}              attrs\n * @return {String}\n */\nfbUtils.markup = function (tag) {\n  var content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var attrs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var contentType = void 0,\n      field = document.createElement(tag),\n      getContentType = function getContentType(content) {\n    return Array.isArray(content) ? 'array' : typeof content === 'undefined' ? 'undefined' : _typeof(content);\n  },\n      appendContent = {\n    string: function string(content) {\n      field.innerHTML = content;\n    },\n    object: function object(content) {\n      return field.appendChild(content);\n    },\n    array: function array(content) {\n      for (var i = 0; i < content.length; i++) {\n        contentType = getContentType(content[i]);\n        appendContent[contentType](content[i]);\n      }\n    }\n  };\n\n  for (var attr in attrs) {\n    if (attrs.hasOwnProperty(attr)) {\n      var name = fbUtils.safeAttrName(attr);\n      field.setAttribute(name, attrs[attr]);\n    }\n  }\n\n  contentType = getContentType(content);\n\n  if (content) {\n    appendContent[contentType].call(this, content);\n  }\n\n  return field;\n};\n\n/**\n * Convert html element attributes to key/value object\n * @param  {Object} DOM element\n * @return {Object} ex: {attrName: attrValue}\n */\nfbUtils.parseAttrs = function (elem) {\n  var attrs = elem.attributes;\n  var data = {};\n  fbUtils.forEach(attrs, function (attr) {\n    var attrVal = attrs[attr].value;\n    if (attrVal.match(/false|true/g)) {\n      attrVal = attrVal === 'true';\n    } else if (attrVal.match(/undefined/g)) {\n      attrVal = undefined;\n    }\n\n    if (attrVal) {\n      data[attrs[attr].name] = attrVal;\n    }\n  });\n\n  return data;\n};\n\n/**\n * Convert field options to optionData\n * @param  {Object} DOM element\n * @return {Array}      optionData array\n */\nfbUtils.parseOptions = function (field) {\n  var options = field.getElementsByTagName('option'),\n      optionData = {},\n      data = [];\n\n  if (options.length) {\n    for (var i = 0; i < options.length; i++) {\n      optionData = fbUtils.parseAttrs(options[i]);\n      optionData.label = options[i].textContent;\n      data.push(optionData);\n    }\n  }\n\n  return data;\n};\n\n/**\n * Parse XML formData\n * @param  {String} xmlString\n * @return {Array}            formData array\n */\nfbUtils.parseXML = function (xmlString) {\n  var parser = new window.DOMParser();\n  var xml = parser.parseFromString(xmlString, 'text/xml'),\n      formData = [];\n\n  if (xml) {\n    var fields = xml.getElementsByTagName('field');\n    for (var i = 0; i < fields.length; i++) {\n      var fieldData = fbUtils.parseAttrs(fields[i]);\n      var nodeChildren = fields[i].children || [];\n\n      if (nodeChildren.length) {\n        fieldData.values = fbUtils.parseOptions(fields[i]);\n      }\n\n      formData.push(fieldData);\n    }\n  }\n\n  return formData;\n};\n\n/**\n * Escape markup so it can be displayed rather than rendered\n * @param  {String} html markup\n * @return {String}      escaped html\n */\nfbUtils.escapeHtml = function (html) {\n  var escapeElement = document.createElement('textarea');\n  escapeElement.textContent = html;\n  return escapeElement.innerHTML;\n};\n\n// Escape an attribute\nfbUtils.escapeAttr = function (str) {\n  var match = {\n    '\"': '&quot;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n  };\n\n  function replaceTag(tag) {\n    return match[tag] || tag;\n  }\n\n  return typeof str === 'string' ? str.replace(/[\"&<>]/g, replaceTag) : str;\n};\n\n// Escape attributes\nfbUtils.escapeAttrs = function (attrs) {\n  for (var attr in attrs) {\n    if (attrs.hasOwnProperty(attr)) {\n      attrs[attr] = fbUtils.escapeAttr(attrs[attr]);\n    }\n  }\n\n  return attrs;\n};\n\n// forEach that can be used on nodeList\nfbUtils.forEach = function (array, callback, scope) {\n  for (var i = 0; i < array.length; i++) {\n    callback.call(scope, i, array[i]); // passes back stuff we need\n  }\n};\n\n/**\n * Remove duplicates from an array of elements\n * @param  {Array} arrArg array with possible duplicates\n * @return {Array}        array with only unique values\n */\nfbUtils.unique = function (array) {\n  return array.filter(function (elem, pos, arr) {\n    return arr.indexOf(elem) === pos;\n  });\n};\n\n/**\n   * Generate preview markup\n   * @param  {object} fieldData\n   * @return {string}       preview markup for field\n   */\nfbUtils.fieldRender = function (fieldData, opts) {\n  var preview = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var fieldMarkup = '',\n      fieldLabel = '',\n      optionsMarkup = '',\n      fieldLabelText = fieldData.label || '',\n      fieldDesc = fieldData.description || '',\n      fieldRequired = '',\n      fieldOptions = fieldData.values;\n\n  fieldData.name = preview ? fieldData.name + '-preview' : fieldData.name;\n  fieldData.id = fieldData.name;\n  fieldData.name = fieldData.multiple ? fieldData.name + '[]' : fieldData.name;\n\n  fieldData.type = fieldData.subtype || fieldData.type;\n\n  if (fieldData.required) {\n    fieldData.required = null;\n    fieldData['aria-required'] = 'true';\n    fieldRequired = '<span class=\"required\">*</span>';\n  }\n\n  if (fieldData.type !== 'hidden') {\n    if (fieldDesc) {\n      fieldDesc = '<span class=\"tooltip-element\" tooltip=\"' + fieldDesc + '\">?</span>';\n    }\n    fieldLabel = '<label for=\"' + fieldData.id + '\" class=\"fb-' + fieldData.type + '-label\">' + fieldLabelText + ' ' + fieldRequired + ' ' + fieldDesc + '</label>';\n  }\n\n  var fieldLabelVal = fieldData.label;\n\n  delete fieldData.label;\n  delete fieldData.description;\n\n  var fieldDataString = fbUtils.attrString(fieldData);\n\n  switch (fieldData.type) {\n    case 'textarea':\n    case 'rich-text':\n      {\n        delete fieldData.type;\n        var fieldVal = fieldData.value || '';\n        fieldMarkup = fieldLabel + '<textarea ' + fieldDataString + '>' + fieldVal + '</textarea>';\n        break;\n      }\n    case 'select':\n      var optionAttrsString;\n      fieldData.type = fieldData.type.replace('-group', '');\n\n      if (fieldOptions) {\n\n        if (fieldData.placeholder) {\n          optionsMarkup += '<option disabled selected>' + fieldData.placeholder + '</option>';\n        }\n\n        for (var i = 0; i < fieldOptions.length; i++) {\n          if (!fieldOptions[i].selected || fieldData.placeholder) {\n            delete fieldOptions[i].selected;\n          }\n          if (!fieldOptions[i].label) {\n            fieldOptions[i].label = '';\n          }\n          optionAttrsString = fbUtils.attrString(fieldOptions[i]);\n          optionsMarkup += '<option ' + optionAttrsString + '>' + fieldOptions[i].label + '</option>';\n        }\n      }\n\n      fieldMarkup = fieldLabel + '<select ' + fieldDataString + '>' + optionsMarkup + '</select>';\n      break;\n    case 'checkbox-group':\n    case 'radio-group':\n      {\n        var optionAttrs = void 0;\n        fieldData.type = fieldData.type.replace('-group', '');\n\n        if (fieldData.type === 'checkbox') {\n          fieldData.name = fieldData.name + '[]';\n        }\n\n        if (fieldOptions) {\n          var _optionAttrsString = void 0;\n\n          for (var _i = 0; _i < fieldOptions.length; _i++) {\n            optionAttrs = Object.assign({ value: '', label: '' }, fieldData, fieldOptions[_i]);\n\n            if (optionAttrs.selected) {\n              delete optionAttrs.selected;\n              optionAttrs.checked = null;\n            }\n\n            optionAttrs.id = fieldData.id + '-' + _i;\n            _optionAttrsString = fbUtils.attrString(optionAttrs);\n            optionsMarkup += '<input ' + _optionAttrsString + ' /> <label for=\"' + optionAttrs.id + '\">' + optionAttrs.label + '</label><br>';\n          }\n\n          if (fieldData.other) {\n            var otherOptionAttrs = {\n              id: fieldData.id + '-' + 'other',\n              className: fieldData.className + ' other-option',\n              onclick: 'fbUtils.otherOptionCB(\\'' + fieldData.id + '-other\\')'\n            };\n\n            _optionAttrsString = fbUtils.attrString(Object.assign({}, fieldData, otherOptionAttrs));\n\n            optionsMarkup += '<input ' + _optionAttrsString + ' /> <label for=\"' + otherOptionAttrs.id + '\">' + opts.messages.other + '</label> <input type=\"text\" name=\"' + fieldData.name + '\" id=\"' + otherOptionAttrs.id + '-value\" style=\"display:none;\" />';\n          }\n        }\n        fieldMarkup = fieldLabel + '<div class=\"' + fieldData.type + '-group\">' + optionsMarkup + '</div>';\n        break;\n      }\n    case 'text':\n    case 'password':\n    case 'email':\n    case 'number':\n    case 'file':\n    case 'hidden':\n    case 'date':\n    case 'tel':\n    case 'autocomplete':\n      fieldMarkup = fieldLabel + ' <input ' + fieldDataString + '>';\n      break;\n    case 'color':\n      fieldMarkup = fieldLabel + ' <input ' + fieldDataString + '> ' + opts.messages.selectColor;\n      break;\n    case 'button':\n    case 'submit':\n      fieldMarkup = '<button ' + fieldDataString + '>' + fieldLabelVal + '</button>';\n      break;\n    case 'checkbox':\n      fieldMarkup = '<input ' + fieldDataString + '> ' + fieldLabel;\n\n      if (fieldData.toggle) {\n        setTimeout(function () {\n          $(document.getElementById(fieldData.id)).kcToggle();\n        }, 100);\n      }\n      break;\n    default:\n      fieldMarkup = '<' + fieldData.type + ' ' + fieldDataString + '>' + fieldLabelVal + '</' + fieldData.type + '>';\n  }\n\n  if (fieldData.type !== 'hidden') {\n    var className = fieldData.id ? 'fb-' + fieldData.type + ' form-group field-' + fieldData.id : '';\n    fieldMarkup = fbUtils.markup('div', fieldMarkup, {\n      className: className\n    });\n  } else {\n    fieldMarkup = fbUtils.markup('input', null, fieldData);\n  }\n\n  return fieldMarkup;\n};\n\n/**\n * Callback for other option.\n * Toggles the hidden text area for \"other\" option.\n * @param  {String} otherId id of the \"other\" option input\n */\nfbUtils.otherOptionCB = function (otherId) {\n  var otherInput = document.getElementById(otherId),\n      otherInputValue = document.getElementById(otherId + '-value');\n\n  if (otherInput.checked) {\n    otherInput.style.display = 'none';\n    otherInputValue.style.display = 'inline-block';\n  } else {\n    otherInput.style.display = 'inline-block';\n    otherInputValue.style.display = 'none';\n  }\n};\n\n/**\n * Capitalizes a string\n * @param  {String} str uncapitalized string\n * @return {String} str capitalized string\n */\nfbUtils.capitalize = function (str) {\n  return str.replace(/\\b\\w/g, function (m) {\n    return m.toUpperCase();\n  });\n};\n'use strict';\n\n// render the formBuilder XML into html\n\nfunction FormRenderFn(options, element) {\n\n  var utils = fbUtils;\n\n  var formRender = this,\n      defaults = {\n    destroyTemplate: true, // @todo\n    container: false,\n    dataType: 'xml',\n    formData: false,\n    messages: {\n      formRendered: 'Form Rendered',\n      noFormData: 'No form data.',\n      other: 'Other',\n      selectColor: 'Select Color'\n    },\n    onRender: function onRender() {},\n    render: true,\n    notify: {\n      error: function error(message) {\n        return console.error(message);\n      },\n      success: function success(message) {\n        return console.log(message);\n      },\n      warning: function warning(message) {\n        return console.warn(message);\n      }\n    }\n  };\n\n  var opts = $.extend(true, defaults, options);\n\n  (function () {\n    if (!opts.formData) {\n      return false;\n    }\n\n    var setData = {\n      xml: function xml(formData) {\n        return utils.parseXML(formData);\n      },\n      json: function json(formData) {\n        return window.JSON.parse(formData);\n      }\n    };\n\n    opts.formData = setData[opts.dataType](opts.formData) || false;\n  })();\n\n  /**\n   * Extend Element prototype to allow us to append fields\n   *\n   * @param  {Object} fields Node elements\n   */\n  Element.prototype.appendFormFields = function (fields) {\n    var element = this;\n    fields.forEach(function (field) {\n      return element.appendChild(field);\n    });\n  };\n\n  /**\n   * Extend Element prototype to remove content\n   */\n  Element.prototype.emptyContainer = function () {\n    var element = this;\n    while (element.lastChild) {\n      element.removeChild(element.lastChild);\n    }\n  };\n\n  var runCallbacks = function runCallbacks() {\n    if (opts.onRender) {\n      opts.onRender();\n    }\n  };\n\n  var santizeField = function santizeField(field) {\n    var sanitizedField = Object.assign({}, field);\n    sanitizedField.className = field.className || field.class || null;\n    delete sanitizedField.class;\n\n    if (field.values) {\n      field.values = field.values.map(function (option) {\n        return utils.trimObj(option);\n      });\n    }\n\n    return utils.trimObj(sanitizedField);\n  };\n\n  // Begin the core plugin\n  var rendered = [];\n\n  // generate field markup if we have fields\n  if (opts.formData) {\n    for (var i = 0; i < opts.formData.length; i++) {\n      var sanitizedField = santizeField(opts.formData[i]);\n      rendered.push(utils.fieldRender(sanitizedField, opts));\n    }\n\n    if (opts.render) {\n      if (opts.container) {\n        var renderedFormWrap = utils.markup('div', rendered, { className: 'rendered-form' });\n        opts.container = opts.container instanceof jQuery ? opts.container[0] : opts.container;\n        opts.container.emptyContainer();\n        opts.container.appendChild(renderedFormWrap);\n      } else if (element) {\n        element.emptyContainer();\n        element.appendFormFields(rendered);\n      }\n\n      runCallbacks();\n      opts.notify.success(opts.messages.formRendered);\n    } else {\n      formRender.markup = rendered.map(function (elem) {\n        return elem.innerHTML;\n      }).join('');\n    }\n  } else {\n    var noData = utils.markup('div', opts.messages.noFormData, {\n      className: 'no-form-data'\n    });\n    rendered.push(noData);\n    opts.notify.error(opts.messages.noFormData);\n  }\n\n  return formRender;\n}\n\n(function ($) {\n\n  $.fn.formRender = function (options) {\n    this.each(function () {\n      var formRender = new FormRenderFn(options, this);\n      return formRender;\n    });\n  };\n})(jQuery);","'use strict';\n/**\n *\n */\n\nconst fbUtils = {};\n\n// cleaner syntax for testing indexOf element\nfbUtils.inArray = function(needle, haystack) {\n  return haystack.indexOf(needle) !== -1;\n};\n\n/**\n * Remove null or undefined values\n * @param  {Object} attrs {attrName: attrValue}\n * @return {Object}       Object trimmed of null or undefined values\n */\nfbUtils.trimObj = function(attrs) {\n  let xmlRemove = [\n    null,\n    undefined,\n    '',\n    false,\n    'false'\n  ];\n  for (var attr in attrs) {\n    if (fbUtils.inArray(attrs[attr], xmlRemove)) {\n      delete attrs[attr];\n    } else if (Array.isArray(attrs[attr])) {\n      if (!attrs[attr].length) {\n        delete attrs[attr];\n      }\n    }\n  }\n\n  return attrs;\n};\n\n/**\n * Test if attribute is a valid HTML attribute\n * @param  {String} attr\n * @return {Boolean}\n */\nfbUtils.validAttr = function(attr) {\n  let invalid = [\n    'values',\n    'enableOther',\n    'other',\n    'label',\n    // 'style',\n    'subtype'\n  ];\n  return !fbUtils.inArray(attr, invalid);\n};\n\n/**\n * Convert an attrs object into a string\n *\n * @param  {Object} attrs object of attributes for markup\n * @return {string}\n */\nfbUtils.attrString = function(attrs) {\n  let attributes = [];\n\n  for (var attr in attrs) {\n    if (attrs.hasOwnProperty(attr) && fbUtils.validAttr(attr)) {\n      attr = fbUtils.safeAttr(attr, attrs[attr]);\n      attributes.push(attr.name + attr.value);\n    }\n  }\n  return attributes.join(' ');\n};\n\n/**\n * Convert attributes to markup safe strings\n * @param  {String} name  attribute name\n * @param  {String} value attribute value\n * @return {Object}       {attrName: attrValue}\n */\nfbUtils.safeAttr = function(name, value) {\n  name = fbUtils.safeAttrName(name);\n  let valString;\n\n  if (value) {\n    if (Array.isArray(value)) {\n      valString = fbUtils.escapeAttr(value.join(' '))\n    } else {\n      if (typeof(value) === 'boolean') {\n        value = value.toString();\n      }\n      valString = fbUtils.escapeAttr(value.replace(',', ' ').trim());\n    }\n  }\n\n  value = value ? `=\"${valString}\"` : '';\n  return {\n    name,\n    value\n  };\n};\n\nfbUtils.safeAttrName = function(name) {\n  let safeAttr = {\n    className: 'class'\n  };\n\n  return safeAttr[name] || fbUtils.hyphenCase(name);\n};\n\n/**\n * Convert strings into lowercase-hyphen\n *\n * @param  {String} str\n * @return {String}\n */\nfbUtils.hyphenCase = (str) => {\n  str = str.replace(/[^\\w\\s\\-]/gi, '');\n  str = str.replace(/([A-Z])/g, function($1) {\n    return '-' + $1.toLowerCase();\n  });\n\n  return str.replace(/\\s/g, '-').replace(/^-+/g, '');\n};\n\n/**\n * convert a hyphenated string to camelCase\n * @param  {String} str\n * @return {String}\n */\nfbUtils.camelCase = (str) => {\n  return str.replace(/-([a-z])/g, function(m, w) {\n    return w.toUpperCase();\n  });\n};\n\n/**\n * Generate markup wrapper where needed\n *\n * @param  {string}              tag\n * @param  {String|Array|Object} content we wrap this\n * @param  {Object}              attrs\n * @return {String}\n */\nfbUtils.markup = function(tag, content = '', attrs = {}) {\n  let contentType,\n    field = document.createElement(tag),\n    getContentType = function(content) {\n      return Array.isArray(content) ? 'array' : typeof content;\n    },\n    appendContent = {\n      string: function(content) {\n        field.innerHTML = content;\n      },\n      object: function(content) {\n        return field.appendChild(content);\n      },\n      array: function(content) {\n        for (var i = 0; i < content.length; i++) {\n          contentType = getContentType(content[i]);\n          appendContent[contentType](content[i]);\n        }\n      }\n    };\n\n  for (var attr in attrs) {\n    if (attrs.hasOwnProperty(attr)) {\n      let name = fbUtils.safeAttrName(attr);\n      field.setAttribute(name, attrs[attr]);\n    }\n  }\n\n  contentType = getContentType(content);\n\n  if (content) {\n    appendContent[contentType].call(this, content);\n  }\n\n  return field;\n};\n\n/**\n * Convert html element attributes to key/value object\n * @param  {Object} DOM element\n * @return {Object} ex: {attrName: attrValue}\n */\nfbUtils.parseAttrs = function(elem) {\n  var attrs = elem.attributes;\n  var data = {};\n  fbUtils.forEach(attrs, attr => {\n    let attrVal = attrs[attr].value;\n    if (attrVal.match(/false|true/g)) {\n      attrVal = (attrVal === 'true');\n    } else if (attrVal.match(/undefined/g)) {\n      attrVal = undefined;\n    }\n\n    if (attrVal) {\n      data[attrs[attr].name] = attrVal;\n    }\n\n  });\n\n  return data;\n};\n\n/**\n * Convert field options to optionData\n * @param  {Object} DOM element\n * @return {Array}      optionData array\n */\nfbUtils.parseOptions = function(field) {\n  let options = field.getElementsByTagName('option'),\n    optionData = {},\n    data = [];\n\n  if (options.length) {\n    for (var i = 0; i < options.length; i++) {\n      optionData = fbUtils.parseAttrs(options[i]);\n      optionData.label = options[i].textContent;\n      data.push(optionData);\n    }\n  }\n\n  return data;\n};\n\n/**\n * Parse XML formData\n * @param  {String} xmlString\n * @return {Array}            formData array\n */\nfbUtils.parseXML = function(xmlString) {\n  const parser = new window.DOMParser();\n  let xml = parser.parseFromString(xmlString, 'text/xml'),\n    formData = [];\n\n  if (xml) {\n    var fields = xml.getElementsByTagName('field');\n    for (var i = 0; i < fields.length; i++) {\n      let fieldData = fbUtils.parseAttrs(fields[i]);\n      let nodeChildren = fields[i].children || [];\n\n      if (nodeChildren.length) {\n        fieldData.values = fbUtils.parseOptions(fields[i]);\n      }\n\n      formData.push(fieldData);\n    }\n  }\n\n  return formData;\n};\n\n/**\n * Escape markup so it can be displayed rather than rendered\n * @param  {String} html markup\n * @return {String}      escaped html\n */\nfbUtils.escapeHtml = function(html) {\n  var escapeElement = document.createElement('textarea');\n  escapeElement.textContent = html;\n  return escapeElement.innerHTML;\n};\n\n// Escape an attribute\nfbUtils.escapeAttr = function(str) {\n  var match = {\n    '\"': '&quot;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n  };\n\n  function replaceTag(tag) {\n    return match[tag] || tag;\n  }\n\n  return (typeof str === 'string') ? str.replace(/[\"&<>]/g, replaceTag) : str;\n};\n\n// Escape attributes\nfbUtils.escapeAttrs = function(attrs) {\n  for (var attr in attrs) {\n    if (attrs.hasOwnProperty(attr)) {\n      attrs[attr] = fbUtils.escapeAttr(attrs[attr]);\n    }\n  }\n\n  return attrs;\n};\n\n// forEach that can be used on nodeList\nfbUtils.forEach = function(array, callback, scope) {\n  for (var i = 0; i < array.length; i++) {\n    callback.call(scope, i, array[i]); // passes back stuff we need\n  }\n};\n\n/**\n * Remove duplicates from an array of elements\n * @param  {Array} arrArg array with possible duplicates\n * @return {Array}        array with only unique values\n */\nfbUtils.unique = function(array) {\n  return array.filter((elem, pos, arr) => {\n    return arr.indexOf(elem) === pos;\n  });\n};\n\n/**\n   * Generate preview markup\n   * @param  {object} fieldData\n   * @return {string}       preview markup for field\n   */\nfbUtils.fieldRender = function(fieldData, opts, preview = false) {\n    var fieldMarkup = '',\n      fieldLabel = '',\n      optionsMarkup = '',\n      fieldLabelText = fieldData.label || '',\n      fieldDesc = fieldData.description || '',\n      fieldRequired = '',\n      fieldOptions = fieldData.values;\n\n    fieldData.name = preview ? fieldData.name + '-preview' : fieldData.name;\n    fieldData.id = fieldData.name;\n    fieldData.name = fieldData.multiple ? fieldData.name + '[]' : fieldData.name;\n\n    fieldData.type = fieldData.subtype || fieldData.type;\n\n    if (fieldData.required) {\n      fieldData.required = null;\n      fieldData['aria-required'] = 'true';\n      fieldRequired = '<span class=\"required\">*</span>';\n    }\n\n    if (fieldData.type !== 'hidden') {\n      if (fieldDesc) {\n        fieldDesc = `<span class=\"tooltip-element\" tooltip=\"${fieldDesc}\">?</span>`;\n      }\n      fieldLabel = `<label for=\"${fieldData.id}\" class=\"fb-${fieldData.type}-label\">${fieldLabelText} ${fieldRequired} ${fieldDesc}</label>`;\n    }\n\n    var fieldLabelVal = fieldData.label;\n\n    delete fieldData.label;\n    delete fieldData.description;\n\n    var fieldDataString = fbUtils.attrString(fieldData);\n\n    switch (fieldData.type) {\n      case 'textarea':\n      case 'rich-text': {\n        delete fieldData.type;\n        let fieldVal = fieldData.value || '';\n        fieldMarkup = `${fieldLabel}<textarea ${fieldDataString}>${fieldVal}</textarea>`;\n        break;\n      }\n      case 'select':\n        var optionAttrsString;\n        fieldData.type = fieldData.type.replace('-group', '');\n\n        if (fieldOptions) {\n\n          if (fieldData.placeholder) {\n            optionsMarkup += `<option disabled selected>${fieldData.placeholder}</option>`;\n          }\n\n          for (let i = 0; i < fieldOptions.length; i++) {\n            if (!fieldOptions[i].selected || fieldData.placeholder) {\n              delete fieldOptions[i].selected;\n            }\n            if (!fieldOptions[i].label) {\n              fieldOptions[i].label = '';\n            }\n            optionAttrsString = fbUtils.attrString(fieldOptions[i]);\n            optionsMarkup += `<option ${optionAttrsString}>${fieldOptions[i].label}</option>`;\n          }\n        }\n\n        fieldMarkup = `${fieldLabel}<select ${fieldDataString}>${optionsMarkup}</select>`;\n        break;\n      case 'checkbox-group':\n      case 'radio-group': {\n        let optionAttrs;\n        fieldData.type = fieldData.type.replace('-group', '');\n\n        if (fieldData.type === 'checkbox') {\n          fieldData.name = fieldData.name + '[]';\n        }\n\n        if (fieldOptions) {\n          let optionAttrsString;\n\n          for (let i = 0; i < fieldOptions.length; i++) {\n            optionAttrs = Object.assign({value: '', label: ''}, fieldData, fieldOptions[i]);\n\n            if (optionAttrs.selected) {\n              delete optionAttrs.selected;\n              optionAttrs.checked = null;\n            }\n\n            optionAttrs.id = fieldData.id + '-' + i;\n            optionAttrsString = fbUtils.attrString(optionAttrs);\n            optionsMarkup += `<input ${optionAttrsString} /> <label for=\"${optionAttrs.id}\">${optionAttrs.label}</label><br>`;\n          }\n\n          if (fieldData.other) {\n            let otherOptionAttrs = {\n              id: fieldData.id + '-' + 'other',\n              className: fieldData.className + ' other-option',\n              onclick: `fbUtils.otherOptionCB('${fieldData.id}-other')`\n            };\n\n            optionAttrsString = fbUtils.attrString(Object.assign({}, fieldData, otherOptionAttrs));\n\n            optionsMarkup += `<input ${optionAttrsString} /> <label for=\"${otherOptionAttrs.id}\">${opts.messages.other}</label> <input type=\"text\" name=\"${fieldData.name}\" id=\"${otherOptionAttrs.id}-value\" style=\"display:none;\" />`;\n          }\n\n        }\n        fieldMarkup = `${fieldLabel}<div class=\"${fieldData.type}-group\">${optionsMarkup}</div>`;\n        break;\n      }\n      case 'text':\n      case 'password':\n      case 'email':\n      case 'number':\n      case 'file':\n      case 'hidden':\n      case 'date':\n      case 'tel':\n      case 'autocomplete':\n        fieldMarkup = `${fieldLabel} <input ${fieldDataString}>`;\n        break;\n      case 'color':\n        fieldMarkup = `${fieldLabel} <input ${fieldDataString}> ${opts.messages.selectColor}`;\n        break;\n      case 'button':\n      case 'submit':\n        fieldMarkup = `<button ${fieldDataString}>${fieldLabelVal}</button>`;\n        break;\n      case 'checkbox':\n        fieldMarkup = `<input ${fieldDataString}> ${fieldLabel}`;\n\n        if (fieldData.toggle) {\n          setTimeout(function() {\n            $(document.getElementById(fieldData.id)).kcToggle();\n          }, 100);\n        }\n        break;\n      default:\n        fieldMarkup = `<${fieldData.type} ${fieldDataString}>${fieldLabelVal}</${fieldData.type}>`;\n    }\n\n    if (fieldData.type !== 'hidden') {\n      let className = fieldData.id ? `fb-${fieldData.type} form-group field-${fieldData.id}` : '';\n      fieldMarkup = fbUtils.markup('div', fieldMarkup, {\n        className: className\n      });\n    } else {\n      fieldMarkup = fbUtils.markup('input', null, fieldData);\n    }\n\n    return fieldMarkup;\n  };\n\n/**\n * Callback for other option.\n * Toggles the hidden text area for \"other\" option.\n * @param  {String} otherId id of the \"other\" option input\n */\nfbUtils.otherOptionCB = (otherId) => {\n  let otherInput = document.getElementById(otherId),\n  otherInputValue = document.getElementById(`${otherId}-value`);\n\n  if (otherInput.checked) {\n    otherInput.style.display = 'none';\n    otherInputValue.style.display = 'inline-block';\n  } else {\n    otherInput.style.display = 'inline-block';\n    otherInputValue.style.display = 'none';\n  }\n};\n\n/**\n * Capitalizes a string\n * @param  {String} str uncapitalized string\n * @return {String} str capitalized string\n */\nfbUtils.capitalize = (str) => {\n  return str.replace(/\\b\\w/g, function(m) {\n      return m.toUpperCase();\n    });\n};\n"]}