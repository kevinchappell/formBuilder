{"version":3,"sources":["form-render.min.js","form-render.js","kc-toggle.js"],"names":["FormRenderFn","options","element","formRender","this","defaults","destroyTemplate","container","dataType","formData","label","selectColor","noFormData","formRendered","render","notify","error","message","console","success","log","warning","warn","_helpers","opts","$","extend","getElement","id","makeId","document","getElementById","epoch","Date","getTime","tagName","value","markup","tag","content","arguments","length","undefined","attrs","contentType","field","createElement","getContentType","Array","isArray","_typeof","appendContent","string","innerHTML","object","appendChild","array","i","attr","hasOwnProperty","name","safeAttrName","setAttribute","call","fieldRender","fieldMarkup","fieldLabel","optionsMarkup","fieldAttrs","parseAttrs","attributes","fieldLabelText","fieldDesc","description","fieldRequired","fieldOptions","type","subtype","required","fieldLabelVal","fieldAttrsString","attrString","replace","each","index","el","optionAttrs","optionAttrsString","textContent","optionName","Object","assign","selected","checked","toggle","setTimeout","kcToggle","className","hyphenCase","str","$1","toLowerCase","safeAttr","push","join","window","JSON","stringify","attrNodes","Element","prototype","appendFormFields","fields","reverse","emptyContainer","lastChild","removeChild","rendered","parseXML","noData","jQuery","renderedFormWrap","querySelector","parentNode","insertBefore","nextSibling","style","display","map","elem","Toggle","theme","labels","off","on","$kcToggle","insertAfter","append","toggleClass","is","kctOn","kctOff","kctHandle","kctInner","click","fn","data","Symbol","iterator","obj","constructor"],"mappings":"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","file":"form-render.min.js","sourcesContent":["'use strict';\n\n(function ($) {\n  'use strict';\n\n  var Toggle = function Toggle(element, options) {\n\n    var defaults = {\n      theme: 'fresh',\n      labels: {\n        off: 'Off',\n        on: 'On'\n      }\n    };\n\n    var opts = $.extend(defaults, options),\n        $kcToggle = $('<div class=\"kc-toggle\"/>').insertAfter(element).append(element);\n\n    $kcToggle.toggleClass('on', element.is(':checked'));\n\n    var kctOn = '<div class=\"kct-on\">' + opts.labels.on + '</div>',\n        kctOff = '<div class=\"kct-off\">' + opts.labels.off + '</div>',\n        kctHandle = '<div class=\"kct-handle\"></div>',\n        kctInner = '<div class=\"kct-inner\">' + kctOn + kctHandle + kctOff + '</div>';\n\n    $kcToggle.append(kctInner);\n\n    $kcToggle.click(function () {\n      element.attr('checked', !element.attr('checked'));\n      $(this).toggleClass('on');\n    });\n  };\n\n  $.fn.kcToggle = function (options) {\n    var toggle = this;\n    return toggle.each(function () {\n      var element = $(this);\n      if (element.data('kcToggle')) {\n        return;\n      }\n      var kcToggle = new Toggle(element, options);\n      element.data('kcToggle', kcToggle);\n    });\n  };\n})(jQuery);\n'use strict';\n// render the formBuilder XML into html\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nfunction FormRenderFn(options, element) {\n\n  var formRender = this,\n      defaults = {\n    destroyTemplate: true, // @todo\n    container: false,\n    dataType: 'xml',\n    formData: false,\n    label: {\n      selectColor: 'Select Color',\n      noFormData: 'No form data.',\n      formRendered: 'Form Rendered'\n    },\n    render: true,\n    notify: {\n      error: function error(message) {\n        return console.error(message);\n      },\n      success: function success(message) {\n        return console.log(message);\n      },\n      warning: function warning(message) {\n        return console.warn(message);\n      }\n    }\n  },\n      _helpers = {};\n\n  var opts = $.extend(true, defaults, options);\n\n  /**\n   * Require the html element if it has been lost\n   *\n   * @return {object} javascript object for html element\n   */\n  _helpers.getElement = function () {\n    if (!element.id) {\n      element.id = _helpers.makeId(element);\n    }\n\n    return document.getElementById(element.id);\n  };\n\n  /**\n   * Make an ID for this element using current date and tag\n   *\n   * @param  {Boolean} element\n   * @return {String}  new id for element\n   */\n  _helpers.makeId = function (element) {\n    var epoch = new Date().getTime();\n\n    return element.tagName + '-' + epoch;\n  };\n\n  if (!opts.formData && element) {\n    element = _helpers.getElement();\n    opts.formData = element.value;\n  }\n\n  /**\n   * Generate markup wrapper where needed\n   *\n   * @param  {string}              tag\n   * @param  {String|Array|Object} content we wrap this\n   * @param  {object}              attrs\n   * @return {String}\n   */\n  _helpers.markup = function (tag) {\n    var content = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];\n    var attrs = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n    var contentType = void 0,\n        field = document.createElement(tag),\n        getContentType = function getContentType(content) {\n      return Array.isArray(content) ? 'array' : typeof content === 'undefined' ? 'undefined' : _typeof(content);\n    },\n        appendContent = {\n      string: function string(content) {\n        field.innerHTML = content;\n      },\n      object: function object(content) {\n        return field.appendChild(content);\n      },\n      array: function array(content) {\n        for (var i = 0; i < content.length; i++) {\n          contentType = getContentType(content[i]);\n          appendContent[contentType](content[i]);\n        }\n      }\n    };\n\n    for (var attr in attrs) {\n      if (attrs.hasOwnProperty(attr)) {\n        var name = _helpers.safeAttrName(attr);\n        field.setAttribute(name, attrs[attr]);\n      }\n    }\n\n    contentType = getContentType(content);\n\n    if (content) {\n      appendContent[contentType].call(this, content);\n    }\n\n    return field;\n  };\n\n  /**\n   * Generate preview markup\n   * @param  {object} field\n   * @return {string}       preview markup for field\n   * @todo\n   */\n  _helpers.fieldRender = function (field) {\n    var fieldMarkup = '',\n        fieldLabel = '',\n        optionsMarkup = '';\n    var fieldAttrs = _helpers.parseAttrs(field.attributes),\n        fieldLabelText = fieldAttrs.label || '',\n        fieldDesc = fieldAttrs.description || '',\n        fieldRequired = '',\n        fieldOptions = $('option', field);\n    fieldAttrs.id = fieldAttrs.name;\n\n    fieldAttrs.type = fieldAttrs.subtype || fieldAttrs.type;\n\n    if (fieldAttrs.required) {\n      fieldAttrs.required = null;\n      fieldAttrs['aria-required'] = 'true';\n      fieldRequired = '<span class=\"required\">*</span>';\n    }\n\n    if (fieldAttrs.type !== 'hidden') {\n      if (fieldDesc) {\n        fieldDesc = '<span class=\"tooltip-element\" tooltip=\"' + fieldDesc + '\">?</span>';\n      }\n      fieldLabel = '<label for=\"' + fieldAttrs.id + '\">' + fieldLabelText + ' ' + fieldRequired + ' ' + fieldDesc + '</label>';\n    }\n\n    var fieldLabelVal = fieldAttrs.label;\n\n    delete fieldAttrs.label;\n    delete fieldAttrs.description;\n\n    var fieldAttrsString = _helpers.attrString(fieldAttrs);\n\n    switch (fieldAttrs.type) {\n      case 'textarea':\n      case 'rich-text':\n        delete fieldAttrs.type;\n        delete fieldAttrs.value;\n        fieldMarkup = fieldLabel + '<textarea ' + fieldAttrsString + '></textarea>';\n        break;\n      case 'select':\n        fieldAttrs.type = fieldAttrs.type.replace('-group', '');\n\n        if (fieldOptions.length) {\n          fieldOptions.each(function (index, el) {\n            index = index;\n            var optionAttrs = _helpers.parseAttrs(el.attributes),\n                optionAttrsString = _helpers.attrString(optionAttrs);\n            optionsMarkup += '<option ' + optionAttrsString + '>' + el.textContent + '</option>';\n          });\n        }\n        fieldMarkup = fieldLabel + '<select ' + fieldAttrsString + '>' + optionsMarkup + '</select>';\n        break;\n      case 'checkbox-group':\n      case 'radio-group':\n        fieldAttrs.type = fieldAttrs.type.replace('-group', '');\n\n        // delete fieldAttrs.className;\n\n        if (fieldOptions.length) {\n          (function () {\n            var optionName = fieldAttrs.type === 'checkbox' ? fieldAttrs.name + '[]' : fieldAttrs.name;\n            fieldOptions.each(function (index, el) {\n              var optionAttrs = Object.assign({}, fieldAttrs, _helpers.parseAttrs(el.attributes)),\n                  optionAttrsString = void 0;\n\n              if (optionAttrs.selected) {\n                delete optionAttrs.selected;\n                optionAttrs.checked = null;\n              }\n\n              optionAttrs.name = optionName;\n              optionAttrs.id = fieldAttrs.id + '-' + index;\n              optionAttrsString = _helpers.attrString(optionAttrs);\n              optionsMarkup += '<input ' + optionAttrsString + ' /> <label for=\"' + optionAttrs.id + '\">' + el.textContent + '</label><br>';\n            });\n          })();\n        }\n        fieldMarkup = fieldLabel + '<div class=\"' + fieldAttrs.type + '-group\">' + optionsMarkup + '</div>';\n        break;\n      case 'text':\n      case 'password':\n      case 'email':\n      case 'file':\n      case 'hidden':\n      case 'date':\n      case 'autocomplete':\n        fieldMarkup = fieldLabel + ' <input ' + fieldAttrsString + '>';\n        break;\n      case 'color':\n        fieldMarkup = fieldLabel + ' <input ' + fieldAttrsString + '> ' + opts.label.selectColor;\n        break;\n      case 'button':\n      case 'submit':\n        fieldMarkup = '<button ' + fieldAttrsString + '>' + fieldLabelVal + '</button>';\n        break;\n      case 'checkbox':\n        fieldMarkup = '<input ' + fieldAttrsString + '> ' + fieldLabel;\n\n        if (fieldAttrs.toggle) {\n          setTimeout(function () {\n            $(document.getElementById(fieldAttrs.id)).kcToggle();\n          }, 100);\n        }\n        break;\n      default:\n        fieldMarkup = '<' + fieldAttrs.type + ' ' + fieldAttrsString + '>' + fieldLabelVal + '</' + fieldAttrs.type + '>';\n    }\n\n    if (fieldAttrs.type !== 'hidden') {\n      var className = fieldAttrs.id ? 'form-group field-' + fieldAttrs.id : '';\n      fieldMarkup = _helpers.markup('div', fieldMarkup, {\n        className: className\n      });\n    } else {\n      fieldMarkup = _helpers.markup('input', null, fieldAttrs);\n    }\n\n    return fieldMarkup;\n  };\n\n  /**\n   * Convert camelCase into lowercase-hyphen\n   *\n   * @param  {string} str\n   * @return {string}\n   */\n  _helpers.hyphenCase = function (str) {\n    str = str.replace(/[^\\w\\s\\-]/gi, '');\n    str = str.replace(/([A-Z])/g, function ($1) {\n      return '-' + $1.toLowerCase();\n    });\n\n    return str.replace(/\\s/g, '-').replace(/^-+/g, '');\n  };\n\n  _helpers.attrString = function (attrs) {\n    var attributes = [];\n\n    for (var attr in attrs) {\n      if (attrs.hasOwnProperty(attr)) {\n        attr = _helpers.safeAttr(attr, attrs[attr]);\n        attributes.push(attr.name + attr.value);\n      }\n    }\n    return attributes.join(' ');\n  };\n\n  _helpers.safeAttr = function (name, value) {\n    var safeAttr = {\n      className: 'class'\n    };\n\n    name = safeAttr[name] || name;\n    value = value ? window.JSON.stringify(value) : false;\n    value = value ? '=' + value : '';\n\n    return {\n      name: name,\n      value: value\n    };\n  };\n\n  _helpers.safeAttrName = function (name) {\n    var safeAttr = {\n      className: 'class'\n    };\n\n    return safeAttr[name] || _helpers.hyphenCase(name);\n  };\n\n  _helpers.parseAttrs = function (attrNodes) {\n    var fieldAttrs = {};\n    for (var attr in attrNodes) {\n      if (attrNodes.hasOwnProperty(attr)) {\n        fieldAttrs[attrNodes[attr].name] = attrNodes[attr].value;\n      }\n    }\n    return fieldAttrs;\n  };\n\n  /**\n   * Extend Element prototype to allow us to append fields\n   *\n   * @param  {object} fields Node elements\n   */\n  Element.prototype.appendFormFields = function (fields) {\n    var element = this;\n    fields.reverse();\n    for (var i = fields.length - 1; i >= 0; i--) {\n      element.appendChild(fields[i]);\n    }\n  };\n\n  /**\n   * Extend Element prototype to remove content\n   */\n  Element.prototype.emptyContainer = function () {\n    var element = this;\n    while (element.lastChild) {\n      element.removeChild(element.lastChild);\n    }\n  };\n\n  // Begin the core plugin\n  var rendered = [];\n\n  var formData = $.parseXML(opts.formData),\n      fields = $('field', formData);\n  // @todo - form configuration settings (control position, creatorId, theme etc)\n  // settings = $('settings', formData);\n\n  // generate field markup if we have fields\n  if (fields.length) {\n    fields.each(function (index, field) {\n      index = index;\n      rendered.push(_helpers.fieldRender(field));\n    });\n  } else {\n    var noData = _helpers.markup('div', opts.label.noFormData, {\n      className: 'no-form-data'\n    });\n    rendered.push(noData);\n    opts.notify.error(opts.label.noFormData);\n  }\n\n  if (opts.render) {\n    if (opts.container) {\n      opts.container = opts.container instanceof jQuery ? opts.container[0] : opts.container;\n      opts.container.emptyContainer();\n      opts.container.appendFormFields(rendered);\n    } else if (element) {\n      var renderedFormWrap = document.querySelector('.rendered-form');\n      if (renderedFormWrap) {\n        renderedFormWrap.emptyContainer();\n        renderedFormWrap.appendFormFields(rendered);\n      } else {\n        renderedFormWrap = _helpers.markup('div', rendered, { className: 'rendered-form' });\n        element.parentNode.insertBefore(renderedFormWrap, element.nextSibling);\n        element.style.display = 'none';\n        element.setAttribute('disabled', 'disabled');\n      }\n    }\n    if (fields.length) {\n      opts.notify.success(opts.label.formRendered);\n    }\n  } else {\n    formRender.markup = rendered.map(function (elem) {\n      return elem.innerHTML;\n    }).join('');\n  }\n\n  return formRender;\n}\n\n(function ($) {\n\n  $.fn.formRender = function (options) {\n    this.each(function () {\n      var formRender = new FormRenderFn(options, this);\n      return formRender;\n    });\n  };\n})(jQuery);","'use strict';\n// render the formBuilder XML into html\nfunction FormRenderFn(options, element) {\n\n  var formRender = this,\n    defaults = {\n      destroyTemplate: true, // @todo\n      container: false,\n      dataType: 'xml',\n      formData: false,\n      label: {\n        selectColor: 'Select Color',\n        noFormData: 'No form data.',\n        formRendered: 'Form Rendered'\n      },\n      render: true,\n      notify: {\n        error: function(message) {\n          return console.error(message);\n        },\n        success: function(message) {\n          return console.log(message);\n        },\n        warning: function(message) {\n          return console.warn(message);\n        }\n      }\n    },\n    _helpers = {};\n\n  var opts = $.extend(true, defaults, options);\n\n\n  /**\n   * Require the html element if it has been lost\n   *\n   * @return {object} javascript object for html element\n   */\n  _helpers.getElement = function() {\n    if (!element.id) {\n      element.id = _helpers.makeId(element);\n    }\n\n    return document.getElementById(element.id);\n  };\n\n  /**\n   * Make an ID for this element using current date and tag\n   *\n   * @param  {Boolean} element\n   * @return {String}  new id for element\n   */\n  _helpers.makeId = function(element) {\n    let epoch = new Date().getTime();\n\n    return `${element.tagName}-${epoch}`;\n  };\n\n  if (!opts.formData && element) {\n    element = _helpers.getElement();\n    opts.formData = element.value;\n  }\n\n  /**\n   * Generate markup wrapper where needed\n   *\n   * @param  {string}              tag\n   * @param  {String|Array|Object} content we wrap this\n   * @param  {object}              attrs\n   * @return {String}\n   */\n  _helpers.markup = function(tag, content = '', attrs = {}) {\n    let contentType,\n      field = document.createElement(tag),\n      getContentType = function(content) {\n        return Array.isArray(content) ? 'array' : typeof content;\n      },\n      appendContent = {\n        string: function(content) {\n          field.innerHTML = content;\n        },\n        object: function(content) {\n          return field.appendChild(content);\n        },\n        array: function(content) {\n          for (var i = 0; i < content.length; i++) {\n            contentType = getContentType(content[i]);\n            appendContent[contentType](content[i]);\n          }\n        }\n      };\n\n    for (var attr in attrs) {\n      if (attrs.hasOwnProperty(attr)) {\n        let name = _helpers.safeAttrName(attr);\n        field.setAttribute(name, attrs[attr]);\n      }\n    }\n\n    contentType = getContentType(content);\n\n    if (content) {\n      appendContent[contentType].call(this, content);\n    }\n\n    return field;\n  };\n\n  /**\n   * Generate preview markup\n   * @param  {object} field\n   * @return {string}       preview markup for field\n   * @todo\n   */\n  _helpers.fieldRender = function(field) {\n    var fieldMarkup = '',\n      fieldLabel = '',\n      optionsMarkup = '';\n    var fieldAttrs = _helpers.parseAttrs(field.attributes),\n      fieldLabelText = fieldAttrs.label || '',\n      fieldDesc = fieldAttrs.description || '',\n      fieldRequired = '',\n      fieldOptions = $('option', field);\n    fieldAttrs.id = fieldAttrs.name;\n\n    fieldAttrs.type = fieldAttrs.subtype || fieldAttrs.type;\n\n    if (fieldAttrs.required) {\n      fieldAttrs.required = null;\n      fieldAttrs['aria-required'] = 'true';\n      fieldRequired = `<span class=\"required\">*</span>`;\n    }\n\n    if (fieldAttrs.type !== 'hidden') {\n      if (fieldDesc) {\n        fieldDesc = `<span class=\"tooltip-element\" tooltip=\"${fieldDesc}\">?</span>`;\n      }\n      fieldLabel = `<label for=\"${fieldAttrs.id}\">${fieldLabelText} ${fieldRequired} ${fieldDesc}</label>`;\n    }\n\n    var fieldLabelVal = fieldAttrs.label;\n\n    delete fieldAttrs.label;\n    delete fieldAttrs.description;\n\n    var fieldAttrsString = _helpers.attrString(fieldAttrs);\n\n    switch (fieldAttrs.type) {\n      case 'textarea':\n      case 'rich-text':\n        delete fieldAttrs.type;\n        delete fieldAttrs.value;\n        fieldMarkup = `${fieldLabel}<textarea ${fieldAttrsString}></textarea>`;\n        break;\n      case 'select':\n        fieldAttrs.type = fieldAttrs.type.replace('-group', '');\n\n        if (fieldOptions.length) {\n          fieldOptions.each(function(index, el) {\n            index = index;\n            let optionAttrs = _helpers.parseAttrs(el.attributes),\n              optionAttrsString = _helpers.attrString(optionAttrs);\n            optionsMarkup += `<option ${optionAttrsString}>${el.textContent}</option>`;\n          });\n        }\n        fieldMarkup = `${fieldLabel}<select ${fieldAttrsString}>${optionsMarkup}</select>`;\n        break;\n      case 'checkbox-group':\n      case 'radio-group':\n        fieldAttrs.type = fieldAttrs.type.replace('-group', '');\n\n        // delete fieldAttrs.className;\n\n        if (fieldOptions.length) {\n          let optionName = fieldAttrs.type === 'checkbox' ? fieldAttrs.name + '[]' : fieldAttrs.name;\n          fieldOptions.each(function(index, el) {\n            let optionAttrs = Object.assign({}, fieldAttrs, _helpers.parseAttrs(el.attributes)),\n              optionAttrsString;\n\n            if (optionAttrs.selected) {\n              delete optionAttrs.selected;\n              optionAttrs.checked = null;\n            }\n\n            optionAttrs.name = optionName;\n            optionAttrs.id = fieldAttrs.id + '-' + index;\n            optionAttrsString = _helpers.attrString(optionAttrs);\n            optionsMarkup += `<input ${optionAttrsString} /> <label for=\"${optionAttrs.id}\">${el.textContent}</label><br>`;\n          });\n        }\n        fieldMarkup = `${fieldLabel}<div class=\"${fieldAttrs.type}-group\">${optionsMarkup}</div>`;\n        break;\n      case 'text':\n      case 'password':\n      case 'email':\n      case 'file':\n      case 'hidden':\n      case 'date':\n      case 'autocomplete':\n        fieldMarkup = `${fieldLabel} <input ${fieldAttrsString}>`;\n        break;\n      case 'color':\n        fieldMarkup = `${fieldLabel} <input ${fieldAttrsString}> ${opts.label.selectColor}`;\n        break;\n      case 'button':\n      case 'submit':\n        fieldMarkup = `<button ${fieldAttrsString}>${fieldLabelVal}</button>`;\n        break;\n      case 'checkbox':\n        fieldMarkup = `<input ${fieldAttrsString}> ${fieldLabel}`;\n\n        if (fieldAttrs.toggle) {\n          setTimeout(function() {\n            $(document.getElementById(fieldAttrs.id)).kcToggle();\n          }, 100);\n        }\n        break;\n      default:\n        fieldMarkup = `<${fieldAttrs.type} ${fieldAttrsString}>${fieldLabelVal}</${fieldAttrs.type}>`;\n    }\n\n    if (fieldAttrs.type !== 'hidden') {\n      let className = fieldAttrs.id ? 'form-group field-' + fieldAttrs.id : '';\n      fieldMarkup = _helpers.markup('div', fieldMarkup, {\n        className: className\n      });\n    } else {\n      fieldMarkup = _helpers.markup('input', null, fieldAttrs);\n    }\n\n    return fieldMarkup;\n  };\n\n  /**\n   * Convert camelCase into lowercase-hyphen\n   *\n   * @param  {string} str\n   * @return {string}\n   */\n  _helpers.hyphenCase = (str) => {\n    str = str.replace(/[^\\w\\s\\-]/gi, '');\n    str = str.replace(/([A-Z])/g, function($1) {\n      return '-' + $1.toLowerCase();\n    });\n\n    return str.replace(/\\s/g, '-').replace(/^-+/g, '');\n  };\n\n  _helpers.attrString = function(attrs) {\n    let attributes = [];\n\n    for (var attr in attrs) {\n      if (attrs.hasOwnProperty(attr)) {\n        attr = _helpers.safeAttr(attr, attrs[attr]);\n        attributes.push(attr.name + attr.value);\n      }\n    }\n    return attributes.join(' ');\n  };\n\n  _helpers.safeAttr = function(name, value) {\n    let safeAttr = {\n      className: 'class'\n    };\n\n    name = safeAttr[name] || name;\n    value = value ? window.JSON.stringify(value) : false;\n    value = value ? `=${value}` : '';\n\n    return {\n      name,\n      value\n    };\n  };\n\n  _helpers.safeAttrName = function(name) {\n    let safeAttr = {\n      className: 'class'\n    };\n\n    return safeAttr[name] || _helpers.hyphenCase(name);\n  };\n\n  _helpers.parseAttrs = function(attrNodes) {\n    var fieldAttrs = {};\n    for (var attr in attrNodes) {\n      if (attrNodes.hasOwnProperty(attr)) {\n        fieldAttrs[attrNodes[attr].name] = attrNodes[attr].value;\n      }\n    }\n    return fieldAttrs;\n  };\n\n  /**\n   * Extend Element prototype to allow us to append fields\n   *\n   * @param  {object} fields Node elements\n   */\n  Element.prototype.appendFormFields = function(fields) {\n    var element = this;\n    fields.reverse();\n    for (var i = fields.length - 1; i >= 0; i--) {\n      element.appendChild(fields[i]);\n    }\n  };\n\n  /**\n   * Extend Element prototype to remove content\n   */\n  Element.prototype.emptyContainer = function() {\n    var element = this;\n    while (element.lastChild) {\n      element.removeChild(element.lastChild);\n    }\n  };\n\n  // Begin the core plugin\n  var rendered = [];\n\n  var formData = $.parseXML(opts.formData),\n    fields = $('field', formData);\n  // @todo - form configuration settings (control position, creatorId, theme etc)\n  // settings = $('settings', formData);\n\n  // generate field markup if we have fields\n  if (fields.length) {\n    fields.each(function(index, field) {\n      index = index;\n      rendered.push(_helpers.fieldRender(field));\n    });\n  } else {\n    let noData = _helpers.markup('div', opts.label.noFormData, {\n      className: 'no-form-data'\n    });\n    rendered.push(noData);\n    opts.notify.error(opts.label.noFormData);\n  }\n\n  if (opts.render) {\n    if (opts.container) {\n      opts.container = (opts.container instanceof jQuery) ? opts.container[0] : opts.container;\n      opts.container.emptyContainer();\n      opts.container.appendFormFields(rendered);\n    } else if (element) {\n      let renderedFormWrap = document.querySelector('.rendered-form');\n      if (renderedFormWrap) {\n        renderedFormWrap.emptyContainer();\n        renderedFormWrap.appendFormFields(rendered);\n      } else {\n        renderedFormWrap = _helpers.markup('div', rendered, { className: 'rendered-form' });\n        element.parentNode.insertBefore(renderedFormWrap, element.nextSibling);\n        element.style.display = 'none';\n        element.setAttribute('disabled', 'disabled');\n      }\n    }\n    if (fields.length) {\n      opts.notify.success(opts.label.formRendered);\n    }\n  } else {\n    formRender.markup = rendered.map(function(elem) {\n      return elem.innerHTML;\n    }).join('');\n  }\n\n  return formRender;\n}\n\n(function($) {\n\n  $.fn.formRender = function(options) {\n    this.each(function() {\n      let formRender = new FormRenderFn(options, this);\n      return formRender;\n    });\n  };\n\n})(jQuery);\n","(function($) {\n  'use strict';\n\n  var Toggle = function(element, options) {\n\n    var defaults = {\n      theme: 'fresh',\n      labels: {\n        off: 'Off',\n        on: 'On'\n      }\n    };\n\n    var opts = $.extend(defaults, options),\n      $kcToggle = $('<div class=\"kc-toggle\"/>').insertAfter(element).append(element);\n\n    $kcToggle.toggleClass('on', element.is(':checked'));\n\n    var kctOn = `<div class=\"kct-on\">${opts.labels.on}</div>`,\n        kctOff = `<div class=\"kct-off\">${opts.labels.off}</div>`,\n        kctHandle = `<div class=\"kct-handle\"></div>`,\n        kctInner = `<div class=\"kct-inner\">${kctOn}${kctHandle}${kctOff}</div>`;\n\n    $kcToggle.append(kctInner);\n\n    $kcToggle.click(function() {\n      element.attr('checked', !element.attr('checked'));\n      $(this).toggleClass('on');\n    });\n\n  };\n\n  $.fn.kcToggle = function(options) {\n    var toggle = this;\n    return toggle.each(function() {\n      var element = $(this);\n      if (element.data('kcToggle')) {\n        return;\n      }\n      var kcToggle = new Toggle(element, options);\n      element.data('kcToggle', kcToggle);\n    });\n  };\n\n})(jQuery);\n"],"sourceRoot":"/source/"}