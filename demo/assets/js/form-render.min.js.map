{"version":3,"sources":["polyfills.js","form-render.js","kc-toggle.js","form-render.min.js","utils.js"],"names":["FormRenderFn","options","element","utils","fbUtils","formRender","this","defaults","destroyTemplate","container","dataType","formData","label","formRendered","noFormData","other","selectColor","render","notify","error","message","console","success","log","warning","warn","_helpers","opts","$","extend","setData","xml","parseXML","json","window","JSON","parse","fieldRender","fieldData","fieldMarkup","fieldLabel","optionsMarkup","fieldLabelText","fieldDesc","description","fieldRequired","fieldOptions","values","id","name","multiple","type","subtype","required","fieldLabelVal","fieldDataString","attrString","fieldVal","value","optionAttrsString","replace","_i","length","selected","optionAttrs","_optionAttrsString","_i2","Object","assign","checked","enableOther","otherOptionAttrs","className","toggle","setTimeout","document","getElementById","kcToggle","markup","Element","prototype","appendFormFields","fields","reverse","i","appendChild","emptyContainer","lastChild","removeChild","otherOptionCB","otherOptions","getElementsByClassName","_loop","otherInput","onclick","option","style","display","nextElementSibling","oninput","undefined","runCallbacks","santizeField","field","sanitizedField","trimObj","rendered","push","renderedFormWrap","jQuery","map","elem","innerHTML","join","noData","remove","parentNode","Event","evt","event","createEvent","initEvent","target","TypeError","index","arguments","source","key","hasOwnProperty","call","Toggle","theme","labels","off","on","$kcToggle","insertAfter","append","toggleClass","is","kctOn","kctOff","kctHandle","kctInner","click","attr","fn","each","data","_typeof","Symbol","iterator","obj","constructor","inArray","needle","haystack","indexOf","attrs","xmlRemove","validAttr","invalid","attributes","safeAttr","safeAttrName","valString","escapeAttr","hyphenCase","str","$1","toLowerCase","camelCase","m","w","toUpperCase","tag","content","contentType","createElement","getContentType","Array","isArray","appendContent","string","object","array","setAttribute","parseAttrs","parseOptions","getElementsByTagName","optionData","textContent","xmlString","parser","DOMParser","parseFromString","escapeHtml","html","escapeElement","replaceTag","match","\"","&","<",">","escapeAttrs","forEach","callback","scope","unique","filter","pos","arr"],"mappings":"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","file":"form-render.min.js","sourcesContent":["'use strict';\n\n// Element.remove() polyfill\nif (!('remove' in Element.prototype)) {\n  Element.prototype.remove = function() {\n    if (this.parentNode) {\n      this.parentNode.removeChild(this);\n    }\n  };\n}\n\n// Event polyfill\nif (typeof Event !== 'function') {\n  (function() {\n    window.Event = function(evt) {\n      var event = document.createEvent('Event');\n      event.initEvent(evt, true, true);\n      return event;\n    };\n  })();\n}\n\n// Object.assign polyfill\nif (typeof Object.assign != 'function') {\n  Object.assign = function(target) {\n    'use strict';\n    if (target == null) {\n      throw new TypeError('Cannot convert undefined or null to object');\n    }\n\n    target = Object(target);\n    for (var index = 1; index < arguments.length; index++) {\n      var source = arguments[index];\n      if (source != null) {\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n    }\n    return target;\n  };\n}\n","'use strict';\n\n// render the formBuilder XML into html\nfunction FormRenderFn(options, element) {\n\n  var utils = fbUtils;\n\n  var formRender = this,\n    defaults = {\n      destroyTemplate: true, // @todo\n      container: false,\n      dataType: 'xml',\n      formData: false,\n      label: {\n        formRendered: 'Form Rendered',\n        noFormData: 'No form data.',\n        other: 'Other',\n        selectColor: 'Select Color'\n      },\n      render: true,\n      notify: {\n        error: function(message) {\n          return console.error(message);\n        },\n        success: function(message) {\n          return console.log(message);\n        },\n        warning: function(message) {\n          return console.warn(message);\n        }\n      }\n    },\n    _helpers = {};\n\n  var opts = $.extend(true, defaults, options);\n\n  (function() {\n    if (!opts.formData) {\n      return false;\n    }\n\n    let setData = {\n      xml: formData => utils.parseXML(formData),\n      json: formData => window.JSON.parse(formData)\n    };\n\n    opts.formData = setData[opts.dataType](opts.formData) || false;\n  })();\n\n  /**\n   * Generate preview markup\n   * @param  {object} fieldData\n   * @return {string}       preview markup for field\n   */\n  _helpers.fieldRender = function(fieldData) {\n    var fieldMarkup = '',\n      fieldLabel = '',\n      optionsMarkup = '',\n      fieldLabelText = fieldData.label || '',\n      fieldDesc = fieldData.description || '',\n      fieldRequired = '',\n      fieldOptions = fieldData.values || [];\n\n    fieldData.id = fieldData.name;\n    fieldData.name = fieldData.multiple ? fieldData.name + '[]' : fieldData.name;\n\n    fieldData.type = fieldData.subtype || fieldData.type;\n\n    if (fieldData.required) {\n      fieldData.required = null;\n      fieldData['aria-required'] = 'true';\n      fieldRequired = `<span class=\"required\">*</span>`;\n    }\n\n    if (fieldData.type !== 'hidden') {\n      if (fieldDesc) {\n        fieldDesc = `<span class=\"tooltip-element\" tooltip=\"${fieldDesc}\">?</span>`;\n      }\n      fieldLabel = `<label for=\"${fieldData.id}\">${fieldLabelText} ${fieldRequired} ${fieldDesc}</label>`;\n    }\n\n    var fieldLabelVal = fieldData.label;\n\n    delete fieldData.label;\n    delete fieldData.description;\n\n    var fieldDataString = utils.attrString(fieldData);\n\n    switch (fieldData.type) {\n      case 'textarea':\n      case 'rich-text':\n        delete fieldData.type;\n        let fieldVal = fieldData.value || '';\n        fieldMarkup = `${fieldLabel}<textarea ${fieldDataString}>${fieldVal}</textarea>`;\n        break;\n      case 'select':\n        var optionAttrsString;\n        fieldData.type = fieldData.type.replace('-group', '');\n\n        if (fieldOptions) {\n          for (let i = 0; i < fieldOptions.length; i++) {\n            if (!fieldOptions[i].selected) {\n              delete fieldOptions[i].selected;\n            }\n            optionAttrsString = utils.attrString(fieldOptions[i]);\n            optionsMarkup += `<option ${optionAttrsString}>${fieldOptions[i].label}</option>`;\n          }\n        }\n\n        fieldMarkup = `${fieldLabel}<select ${fieldDataString}>${optionsMarkup}</select>`;\n        break;\n      case 'checkbox-group':\n      case 'radio-group':\n        let optionAttrs;\n        fieldData.type = fieldData.type.replace('-group', '');\n\n        if (fieldData.type === 'checkbox') {\n          fieldData.name = fieldData.name + '[]';\n        }\n\n        if (fieldOptions) {\n          let optionAttrsString;\n\n          for (let i = 0; i < fieldOptions.length; i++) {\n            optionAttrs = Object.assign({}, fieldData, fieldOptions[i]);\n\n            if (optionAttrs.selected) {\n              delete optionAttrs.selected;\n              optionAttrs.checked = null;\n            }\n\n            optionAttrs.id = fieldData.id + '-' + i;\n            optionAttrsString = utils.attrString(optionAttrs);\n            optionsMarkup += `<input ${optionAttrsString} /> <label for=\"${optionAttrs.id}\">${optionAttrs.label}</label><br>`;\n          }\n\n          if (fieldData.enableOther || fieldData['enable-other']) {\n            let otherOptionAttrs = {\n              id: fieldData.id + '-' + 'other',\n              className: fieldData.className + ' other-option'\n            };\n\n            optionAttrsString = utils.attrString(Object.assign({}, fieldData, otherOptionAttrs));\n\n            optionsMarkup += `<input ${optionAttrsString} /> <label for=\"${otherOptionAttrs.id}\">${opts.label.other}</label> <input type=\"text\" data-other-id=\"${otherOptionAttrs.id}\" name=\"${otherOptionAttrs.name}\" id=\"${otherOptionAttrs.id}-value\" style=\"display:none;\" />`;\n          }\n\n        }\n        fieldMarkup = `${fieldLabel}<div class=\"${fieldData.type}-group\">${optionsMarkup}</div>`;\n        break;\n      case 'text':\n      case 'password':\n      case 'email':\n      case 'number':\n      case 'file':\n      case 'hidden':\n      case 'date':\n      case 'tel':\n      case 'autocomplete':\n        fieldMarkup = `${fieldLabel} <input ${fieldDataString}>`;\n        break;\n      case 'color':\n        fieldMarkup = `${fieldLabel} <input ${fieldDataString}> ${opts.label.selectColor}`;\n        break;\n      case 'button':\n      case 'submit':\n        fieldMarkup = `<button ${fieldDataString}>${fieldLabelVal}</button>`;\n        break;\n      case 'checkbox':\n        fieldMarkup = `<input ${fieldDataString}> ${fieldLabel}`;\n\n        if (fieldData.toggle) {\n          setTimeout(function() {\n            $(document.getElementById(fieldData.id)).kcToggle();\n          }, 100);\n        }\n        break;\n      default:\n        fieldMarkup = `<${fieldData.type} ${fieldDataString}>${fieldLabelVal}</${fieldData.type}>`;\n    }\n\n    if (fieldData.type !== 'hidden') {\n      let className = fieldData.id ? 'form-group field-' + fieldData.id : '';\n      fieldMarkup = utils.markup('div', fieldMarkup, {\n        className: className\n      });\n    } else {\n      fieldMarkup = utils.markup('input', null, fieldData);\n    }\n\n    return fieldMarkup;\n  };\n\n  /**\n   * Extend Element prototype to allow us to append fields\n   *\n   * @param  {object} fields Node elements\n   */\n  Element.prototype.appendFormFields = function(fields) {\n    var element = this;\n    fields.reverse();\n    for (var i = fields.length - 1; i >= 0; i--) {\n      element.appendChild(fields[i]);\n    }\n  };\n\n  /**\n   * Extend Element prototype to remove content\n   */\n  Element.prototype.emptyContainer = function() {\n    var element = this;\n    while (element.lastChild) {\n      element.removeChild(element.lastChild);\n    }\n  };\n\n  var otherOptionCB = function() {\n    var otherOptions = document.getElementsByClassName('other-option');\n    for (var i = 0; i < otherOptions.length; i++) {\n      let otherInput = document.getElementById(otherOptions[i].id + '-value');\n      otherOptions[i].onclick = function() {\n        let option = this;\n        if (this.checked) {\n          otherInput.style.display = 'inline-block';\n          option.nextElementSibling.style.display = 'none';\n          otherInput.oninput = function() { option.value = this.value; };\n        } else {\n          otherInput.style.display = 'none';\n          option.nextElementSibling.style.display = 'inline-block';\n          otherInput.oninput = undefined;\n        }\n      };\n    }\n  };\n\n  var runCallbacks = function() {\n    otherOptionCB();\n  };\n\n  var santizeField = (field) => {\n    let sanitizedField = Object.assign({}, field);\n    sanitizedField.className = field.className || field.class || null;\n    delete sanitizedField.class;\n\n    return utils.trimObj(sanitizedField);\n  };\n\n  // Begin the core plugin\n  var rendered = [];\n\n  // generate field markup if we have fields\n  if (opts.formData) {\n    for (var i = 0; i < opts.formData.length; i++) {\n      let sanitizedField = santizeField(opts.formData[i]);\n      rendered.push(_helpers.fieldRender(sanitizedField));\n    }\n\n    if (opts.render) {\n      if (opts.container) {\n        let renderedFormWrap = utils.markup('div', rendered, { className: 'rendered-form' });\n        opts.container = (opts.container instanceof jQuery) ? opts.container[0] : opts.container;\n        opts.container.emptyContainer();\n        opts.container.appendChild(renderedFormWrap);\n      } else if (element) {\n        element.emptyContainer();\n        element.appendFormFields(rendered);\n      }\n\n      runCallbacks();\n      opts.notify.success(opts.label.formRendered);\n    } else {\n      formRender.markup = rendered.map(function(elem) {\n        return elem.innerHTML;\n      }).join('');\n    }\n  } else {\n    let noData = utils.markup('div', opts.label.noFormData, {\n      className: 'no-form-data'\n    });\n    rendered.push(noData);\n    opts.notify.error(opts.label.noFormData);\n  }\n\n  return formRender;\n}\n\n(function($) {\n\n  $.fn.formRender = function(options) {\n    this.each(function() {\n      let formRender = new FormRenderFn(options, this);\n      return formRender;\n    });\n  };\n\n})(jQuery);\n","(function($) {\n  'use strict';\n\n  var Toggle = function(element, options) {\n\n    var defaults = {\n      theme: 'fresh',\n      labels: {\n        off: 'Off',\n        on: 'On'\n      }\n    };\n\n    var opts = $.extend(defaults, options),\n      $kcToggle = $('<div class=\"kc-toggle\"/>').insertAfter(element).append(element);\n\n    $kcToggle.toggleClass('on', element.is(':checked'));\n\n    var kctOn = `<div class=\"kct-on\">${opts.labels.on}</div>`,\n        kctOff = `<div class=\"kct-off\">${opts.labels.off}</div>`,\n        kctHandle = `<div class=\"kct-handle\"></div>`,\n        kctInner = `<div class=\"kct-inner\">${kctOn}${kctHandle}${kctOff}</div>`;\n\n    $kcToggle.append(kctInner);\n\n    $kcToggle.click(function() {\n      element.attr('checked', !element.attr('checked'));\n      $(this).toggleClass('on');\n    });\n\n  };\n\n  $.fn.kcToggle = function(options) {\n    var toggle = this;\n    return toggle.each(function() {\n      var element = $(this);\n      if (element.data('kcToggle')) {\n        return;\n      }\n      var kcToggle = new Toggle(element, options);\n      element.data('kcToggle', kcToggle);\n    });\n  };\n\n})(jQuery);\n","'use strict';\n\n// Element.remove() polyfill\n\nif (!('remove' in Element.prototype)) {\n  Element.prototype.remove = function () {\n    if (this.parentNode) {\n      this.parentNode.removeChild(this);\n    }\n  };\n}\n\n// Event polyfill\nif (typeof Event !== 'function') {\n  (function () {\n    window.Event = function (evt) {\n      var event = document.createEvent('Event');\n      event.initEvent(evt, true, true);\n      return event;\n    };\n  })();\n}\n\n// Object.assign polyfill\nif (typeof Object.assign != 'function') {\n  Object.assign = function (target) {\n    'use strict';\n\n    if (target == null) {\n      throw new TypeError('Cannot convert undefined or null to object');\n    }\n\n    target = Object(target);\n    for (var index = 1; index < arguments.length; index++) {\n      var source = arguments[index];\n      if (source != null) {\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n    }\n    return target;\n  };\n}\n'use strict';\n\n(function ($) {\n  'use strict';\n\n  var Toggle = function Toggle(element, options) {\n\n    var defaults = {\n      theme: 'fresh',\n      labels: {\n        off: 'Off',\n        on: 'On'\n      }\n    };\n\n    var opts = $.extend(defaults, options),\n        $kcToggle = $('<div class=\"kc-toggle\"/>').insertAfter(element).append(element);\n\n    $kcToggle.toggleClass('on', element.is(':checked'));\n\n    var kctOn = '<div class=\"kct-on\">' + opts.labels.on + '</div>',\n        kctOff = '<div class=\"kct-off\">' + opts.labels.off + '</div>',\n        kctHandle = '<div class=\"kct-handle\"></div>',\n        kctInner = '<div class=\"kct-inner\">' + kctOn + kctHandle + kctOff + '</div>';\n\n    $kcToggle.append(kctInner);\n\n    $kcToggle.click(function () {\n      element.attr('checked', !element.attr('checked'));\n      $(this).toggleClass('on');\n    });\n  };\n\n  $.fn.kcToggle = function (options) {\n    var toggle = this;\n    return toggle.each(function () {\n      var element = $(this);\n      if (element.data('kcToggle')) {\n        return;\n      }\n      var kcToggle = new Toggle(element, options);\n      element.data('kcToggle', kcToggle);\n    });\n  };\n})(jQuery);\n'use strict';\n/**\n *\n */\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar fbUtils = {};\n\n// cleaner syntax for testing indexOf element\nfbUtils.inArray = function (needle, haystack) {\n  return haystack.indexOf(needle) !== -1;\n};\n\n/**\n * Remove null or undefined values\n * @param  {Object} attrs {attrName: attrValue}\n * @return {Object}       Object trimmed of null or undefined values\n */\nfbUtils.trimObj = function (attrs) {\n  var xmlRemove = [null, undefined, '', false];\n  for (var i in attrs) {\n    if (fbUtils.inArray(attrs[i], xmlRemove)) {\n      delete attrs[i];\n    }\n  }\n  return attrs;\n};\n\n/**\n * Test if attribute is a valid HTML attribute\n * @param  {String} attr\n * @return {Boolean}\n */\nfbUtils.validAttr = function (attr) {\n  var invalid = ['values', 'enableOther', 'other', 'label',\n  // 'style',\n  'subtype'];\n  return !fbUtils.inArray(attr, invalid);\n};\n\n/**\n * Convert an attrs object into a string\n *\n * @param  {Object} attrs object of attributes for markup\n * @return {string}\n */\nfbUtils.attrString = function (attrs) {\n  var attributes = [];\n\n  for (var attr in attrs) {\n    if (attrs.hasOwnProperty(attr) && fbUtils.validAttr(attr)) {\n      attr = fbUtils.safeAttr(attr, attrs[attr]);\n      attributes.push(attr.name + attr.value);\n    }\n  }\n  return attributes.join(' ');\n};\n\n/**\n * Convert attributes to markup safe strings\n * @param  {String} name  attribute name\n * @param  {String} value attribute value\n * @return {Object}       {attrName: attrValue}\n */\nfbUtils.safeAttr = function (name, value) {\n  name = fbUtils.safeAttrName(name);\n\n  var valString = fbUtils.escapeAttr(value);\n\n  value = value ? '=\"' + valString + '\"' : '';\n  return {\n    name: name,\n    value: value\n  };\n};\n\nfbUtils.safeAttrName = function (name) {\n  var safeAttr = {\n    className: 'class'\n  };\n\n  return safeAttr[name] || fbUtils.hyphenCase(name);\n};\n\n/**\n * Convert strings into lowercase-hyphen\n *\n * @param  {String} str\n * @return {String}\n */\nfbUtils.hyphenCase = function (str) {\n  str = str.replace(/[^\\w\\s\\-]/gi, '');\n  str = str.replace(/([A-Z])/g, function ($1) {\n    return '-' + $1.toLowerCase();\n  });\n\n  return str.replace(/\\s/g, '-').replace(/^-+/g, '');\n};\n\n/**\n * convert a hyphenated string to camelCase\n * @param  {String} str\n * @return {String}\n */\nfbUtils.camelCase = function (str) {\n  return str.replace(/-([a-z])/g, function (m, w) {\n    return w.toUpperCase();\n  });\n};\n\n/**\n * Generate markup wrapper where needed\n *\n * @param  {string}              tag\n * @param  {String|Array|Object} content we wrap this\n * @param  {Object}              attrs\n * @return {String}\n */\nfbUtils.markup = function (tag) {\n  var content = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];\n  var attrs = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n  var contentType = void 0,\n      field = document.createElement(tag),\n      getContentType = function getContentType(content) {\n    return Array.isArray(content) ? 'array' : typeof content === 'undefined' ? 'undefined' : _typeof(content);\n  },\n      appendContent = {\n    string: function string(content) {\n      field.innerHTML = content;\n    },\n    object: function object(content) {\n      return field.appendChild(content);\n    },\n    array: function array(content) {\n      for (var i = 0; i < content.length; i++) {\n        contentType = getContentType(content[i]);\n        appendContent[contentType](content[i]);\n      }\n    }\n  };\n\n  for (var attr in attrs) {\n    if (attrs.hasOwnProperty(attr)) {\n      var name = fbUtils.safeAttrName(attr);\n      field.setAttribute(name, attrs[attr]);\n    }\n  }\n\n  contentType = getContentType(content);\n\n  if (content) {\n    appendContent[contentType].call(this, content);\n  }\n\n  return field;\n};\n\n/**\n * Convert html element attributes to key/value object\n * @param  {DOM Object} DOM element\n * @return {Object}     ex: {attrName: attrValue}\n */\nfbUtils.parseAttrs = function (elem) {\n  var attrs = elem.attributes;\n  var data = {};\n\n  for (var attr in attrs) {\n    if (attrs.hasOwnProperty(attr)) {\n      data[attrs[attr].name] = attrs[attr].value;\n    }\n  }\n\n  return data;\n};\n\n/**\n * Convert field options to optionData\n * @param  {DOM Object} DOM element\n * @return {Array}      optionData array\n */\nfbUtils.parseOptions = function (field) {\n  var options = field.getElementsByTagName('option'),\n      optionData = {},\n      data = [];\n\n  if (options.length) {\n    for (var i = 0; i < options.length; i++) {\n      optionData = fbUtils.parseAttrs(options[i]);\n      optionData.label = options[i].textContent;\n      data.push(optionData);\n    }\n  }\n\n  return data;\n};\n\n/**\n * Parse XML formData\n * @param  {String} xmlString\n * @return {Array}            formData array\n */\nfbUtils.parseXML = function (xmlString) {\n  var parser = new window.DOMParser();\n  var xml = parser.parseFromString(xmlString, 'text/xml'),\n      formData = [];\n\n  if (xml) {\n    var fields = xml.getElementsByTagName('field');\n    for (var i = 0; i < fields.length; i++) {\n      var fieldData = fbUtils.parseAttrs(fields[i]);\n      fieldData.values = fbUtils.parseOptions(fields[i]);\n      formData.push(fieldData);\n    }\n  }\n\n  return formData;\n};\n\n/**\n * Escape markup so it can be displayed rather than rendered\n * @param  {String} html markup\n * @return {String}      escaped html\n */\nfbUtils.escapeHtml = function (html) {\n  var escapeElement = document.createElement('textarea');\n  escapeElement.textContent = html;\n  return escapeElement.innerHTML;\n};\n\n// Escape an attribute\nfbUtils.escapeAttr = function (str) {\n  var match = {\n    '\"': '&quot;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n  };\n\n  function replaceTag(tag) {\n    return match[tag] || tag;\n  }\n\n  return typeof str === 'string' ? str.replace(/[\"&<>]/g, replaceTag) : str;\n};\n\n// Escape attributes\nfbUtils.escapeAttrs = function (attrs) {\n  for (var attr in attrs) {\n    if (attrs.hasOwnProperty(attr)) {\n      attrs[attr] = fbUtils.escapeAttr(attrs[attr]);\n    }\n  }\n\n  return attrs;\n};\n\n// forEach that can be used on nodeList\nfbUtils.forEach = function (array, callback, scope) {\n  for (var i = 0; i < array.length; i++) {\n    callback.call(scope, i, array[i]); // passes back stuff we need\n  }\n};\n\n/**\n * Remove duplicates from an array of elements\n * @param  {Array} arrArg array with possible duplicates\n * @return {Array}        array with only unique values\n */\nfbUtils.unique = function (array) {\n  return array.filter(function (elem, pos, arr) {\n    return arr.indexOf(elem) === pos;\n  });\n};\n'use strict';\n\n// render the formBuilder XML into html\n\nfunction FormRenderFn(options, element) {\n\n  var utils = fbUtils;\n\n  var formRender = this,\n      defaults = {\n    destroyTemplate: true, // @todo\n    container: false,\n    dataType: 'xml',\n    formData: false,\n    label: {\n      formRendered: 'Form Rendered',\n      noFormData: 'No form data.',\n      other: 'Other',\n      selectColor: 'Select Color'\n    },\n    render: true,\n    notify: {\n      error: function error(message) {\n        return console.error(message);\n      },\n      success: function success(message) {\n        return console.log(message);\n      },\n      warning: function warning(message) {\n        return console.warn(message);\n      }\n    }\n  },\n      _helpers = {};\n\n  var opts = $.extend(true, defaults, options);\n\n  (function () {\n    if (!opts.formData) {\n      return false;\n    }\n\n    var setData = {\n      xml: function xml(formData) {\n        return utils.parseXML(formData);\n      },\n      json: function json(formData) {\n        return window.JSON.parse(formData);\n      }\n    };\n\n    opts.formData = setData[opts.dataType](opts.formData) || false;\n  })();\n\n  /**\n   * Generate preview markup\n   * @param  {object} fieldData\n   * @return {string}       preview markup for field\n   */\n  _helpers.fieldRender = function (fieldData) {\n    var fieldMarkup = '',\n        fieldLabel = '',\n        optionsMarkup = '',\n        fieldLabelText = fieldData.label || '',\n        fieldDesc = fieldData.description || '',\n        fieldRequired = '',\n        fieldOptions = fieldData.values || [];\n\n    fieldData.id = fieldData.name;\n    fieldData.name = fieldData.multiple ? fieldData.name + '[]' : fieldData.name;\n\n    fieldData.type = fieldData.subtype || fieldData.type;\n\n    if (fieldData.required) {\n      fieldData.required = null;\n      fieldData['aria-required'] = 'true';\n      fieldRequired = '<span class=\"required\">*</span>';\n    }\n\n    if (fieldData.type !== 'hidden') {\n      if (fieldDesc) {\n        fieldDesc = '<span class=\"tooltip-element\" tooltip=\"' + fieldDesc + '\">?</span>';\n      }\n      fieldLabel = '<label for=\"' + fieldData.id + '\">' + fieldLabelText + ' ' + fieldRequired + ' ' + fieldDesc + '</label>';\n    }\n\n    var fieldLabelVal = fieldData.label;\n\n    delete fieldData.label;\n    delete fieldData.description;\n\n    var fieldDataString = utils.attrString(fieldData);\n\n    switch (fieldData.type) {\n      case 'textarea':\n      case 'rich-text':\n        delete fieldData.type;\n        var fieldVal = fieldData.value || '';\n        fieldMarkup = fieldLabel + '<textarea ' + fieldDataString + '>' + fieldVal + '</textarea>';\n        break;\n      case 'select':\n        var optionAttrsString;\n        fieldData.type = fieldData.type.replace('-group', '');\n\n        if (fieldOptions) {\n          for (var _i = 0; _i < fieldOptions.length; _i++) {\n            if (!fieldOptions[_i].selected) {\n              delete fieldOptions[_i].selected;\n            }\n            optionAttrsString = utils.attrString(fieldOptions[_i]);\n            optionsMarkup += '<option ' + optionAttrsString + '>' + fieldOptions[_i].label + '</option>';\n          }\n        }\n\n        fieldMarkup = fieldLabel + '<select ' + fieldDataString + '>' + optionsMarkup + '</select>';\n        break;\n      case 'checkbox-group':\n      case 'radio-group':\n        var optionAttrs = void 0;\n        fieldData.type = fieldData.type.replace('-group', '');\n\n        if (fieldData.type === 'checkbox') {\n          fieldData.name = fieldData.name + '[]';\n        }\n\n        if (fieldOptions) {\n          var _optionAttrsString = void 0;\n\n          for (var _i2 = 0; _i2 < fieldOptions.length; _i2++) {\n            optionAttrs = Object.assign({}, fieldData, fieldOptions[_i2]);\n\n            if (optionAttrs.selected) {\n              delete optionAttrs.selected;\n              optionAttrs.checked = null;\n            }\n\n            optionAttrs.id = fieldData.id + '-' + _i2;\n            _optionAttrsString = utils.attrString(optionAttrs);\n            optionsMarkup += '<input ' + _optionAttrsString + ' /> <label for=\"' + optionAttrs.id + '\">' + optionAttrs.label + '</label><br>';\n          }\n\n          if (fieldData.enableOther || fieldData['enable-other']) {\n            var otherOptionAttrs = {\n              id: fieldData.id + '-' + 'other',\n              className: fieldData.className + ' other-option'\n            };\n\n            _optionAttrsString = utils.attrString(Object.assign({}, fieldData, otherOptionAttrs));\n\n            optionsMarkup += '<input ' + _optionAttrsString + ' /> <label for=\"' + otherOptionAttrs.id + '\">' + opts.label.other + '</label> <input type=\"text\" data-other-id=\"' + otherOptionAttrs.id + '\" name=\"' + otherOptionAttrs.name + '\" id=\"' + otherOptionAttrs.id + '-value\" style=\"display:none;\" />';\n          }\n        }\n        fieldMarkup = fieldLabel + '<div class=\"' + fieldData.type + '-group\">' + optionsMarkup + '</div>';\n        break;\n      case 'text':\n      case 'password':\n      case 'email':\n      case 'number':\n      case 'file':\n      case 'hidden':\n      case 'date':\n      case 'tel':\n      case 'autocomplete':\n        fieldMarkup = fieldLabel + ' <input ' + fieldDataString + '>';\n        break;\n      case 'color':\n        fieldMarkup = fieldLabel + ' <input ' + fieldDataString + '> ' + opts.label.selectColor;\n        break;\n      case 'button':\n      case 'submit':\n        fieldMarkup = '<button ' + fieldDataString + '>' + fieldLabelVal + '</button>';\n        break;\n      case 'checkbox':\n        fieldMarkup = '<input ' + fieldDataString + '> ' + fieldLabel;\n\n        if (fieldData.toggle) {\n          setTimeout(function () {\n            $(document.getElementById(fieldData.id)).kcToggle();\n          }, 100);\n        }\n        break;\n      default:\n        fieldMarkup = '<' + fieldData.type + ' ' + fieldDataString + '>' + fieldLabelVal + '</' + fieldData.type + '>';\n    }\n\n    if (fieldData.type !== 'hidden') {\n      var className = fieldData.id ? 'form-group field-' + fieldData.id : '';\n      fieldMarkup = utils.markup('div', fieldMarkup, {\n        className: className\n      });\n    } else {\n      fieldMarkup = utils.markup('input', null, fieldData);\n    }\n\n    return fieldMarkup;\n  };\n\n  /**\n   * Extend Element prototype to allow us to append fields\n   *\n   * @param  {object} fields Node elements\n   */\n  Element.prototype.appendFormFields = function (fields) {\n    var element = this;\n    fields.reverse();\n    for (var i = fields.length - 1; i >= 0; i--) {\n      element.appendChild(fields[i]);\n    }\n  };\n\n  /**\n   * Extend Element prototype to remove content\n   */\n  Element.prototype.emptyContainer = function () {\n    var element = this;\n    while (element.lastChild) {\n      element.removeChild(element.lastChild);\n    }\n  };\n\n  var otherOptionCB = function otherOptionCB() {\n    var otherOptions = document.getElementsByClassName('other-option');\n\n    var _loop = function _loop() {\n      var otherInput = document.getElementById(otherOptions[i].id + '-value');\n      otherOptions[i].onclick = function () {\n        var option = this;\n        if (this.checked) {\n          otherInput.style.display = 'inline-block';\n          option.nextElementSibling.style.display = 'none';\n          otherInput.oninput = function () {\n            option.value = this.value;\n          };\n        } else {\n          otherInput.style.display = 'none';\n          option.nextElementSibling.style.display = 'inline-block';\n          otherInput.oninput = undefined;\n        }\n      };\n    };\n\n    for (var i = 0; i < otherOptions.length; i++) {\n      _loop();\n    }\n  };\n\n  var runCallbacks = function runCallbacks() {\n    otherOptionCB();\n  };\n\n  var santizeField = function santizeField(field) {\n    var sanitizedField = Object.assign({}, field);\n    sanitizedField.className = field.className || field.class || null;\n    delete sanitizedField.class;\n\n    return utils.trimObj(sanitizedField);\n  };\n\n  // Begin the core plugin\n  var rendered = [];\n\n  // generate field markup if we have fields\n  if (opts.formData) {\n    for (var i = 0; i < opts.formData.length; i++) {\n      var sanitizedField = santizeField(opts.formData[i]);\n      rendered.push(_helpers.fieldRender(sanitizedField));\n    }\n\n    if (opts.render) {\n      if (opts.container) {\n        var renderedFormWrap = utils.markup('div', rendered, { className: 'rendered-form' });\n        opts.container = opts.container instanceof jQuery ? opts.container[0] : opts.container;\n        opts.container.emptyContainer();\n        opts.container.appendChild(renderedFormWrap);\n      } else if (element) {\n        element.emptyContainer();\n        element.appendFormFields(rendered);\n      }\n\n      runCallbacks();\n      opts.notify.success(opts.label.formRendered);\n    } else {\n      formRender.markup = rendered.map(function (elem) {\n        return elem.innerHTML;\n      }).join('');\n    }\n  } else {\n    var noData = utils.markup('div', opts.label.noFormData, {\n      className: 'no-form-data'\n    });\n    rendered.push(noData);\n    opts.notify.error(opts.label.noFormData);\n  }\n\n  return formRender;\n}\n\n(function ($) {\n\n  $.fn.formRender = function (options) {\n    this.each(function () {\n      var formRender = new FormRenderFn(options, this);\n      return formRender;\n    });\n  };\n})(jQuery);","'use strict';\n/**\n *\n */\n\nconst fbUtils = {};\n\n// cleaner syntax for testing indexOf element\nfbUtils.inArray = function(needle, haystack) {\n  return haystack.indexOf(needle) !== -1;\n};\n\n/**\n * Remove null or undefined values\n * @param  {Object} attrs {attrName: attrValue}\n * @return {Object}       Object trimmed of null or undefined values\n */\nfbUtils.trimObj = function(attrs) {\n  let xmlRemove = [\n    null,\n    undefined,\n    '',\n    false\n  ];\n  for (var i in attrs) {\n    if (fbUtils.inArray(attrs[i], xmlRemove)) {\n      delete attrs[i];\n    }\n  }\n  return attrs;\n};\n\n/**\n * Test if attribute is a valid HTML attribute\n * @param  {String} attr\n * @return {Boolean}\n */\nfbUtils.validAttr = function(attr) {\n  let invalid = [\n    'values',\n    'enableOther',\n    'other',\n    'label',\n    // 'style',\n    'subtype'\n  ];\n  return !fbUtils.inArray(attr, invalid);\n};\n\n/**\n * Convert an attrs object into a string\n *\n * @param  {Object} attrs object of attributes for markup\n * @return {string}\n */\nfbUtils.attrString = function(attrs) {\n  let attributes = [];\n\n  for (var attr in attrs) {\n    if (attrs.hasOwnProperty(attr) && fbUtils.validAttr(attr)) {\n      attr = fbUtils.safeAttr(attr, attrs[attr]);\n      attributes.push(attr.name + attr.value);\n    }\n  }\n  return attributes.join(' ');\n};\n\n/**\n * Convert attributes to markup safe strings\n * @param  {String} name  attribute name\n * @param  {String} value attribute value\n * @return {Object}       {attrName: attrValue}\n */\nfbUtils.safeAttr = function(name, value) {\n  name = fbUtils.safeAttrName(name);\n\n  let valString = fbUtils.escapeAttr(value);\n\n  value = value ? `=\"${valString}\"` : '';\n  return {\n    name,\n    value\n  };\n};\n\nfbUtils.safeAttrName = function(name) {\n  let safeAttr = {\n    className: 'class'\n  };\n\n  return safeAttr[name] || fbUtils.hyphenCase(name);\n};\n\n/**\n * Convert strings into lowercase-hyphen\n *\n * @param  {String} str\n * @return {String}\n */\nfbUtils.hyphenCase = (str) => {\n  str = str.replace(/[^\\w\\s\\-]/gi, '');\n  str = str.replace(/([A-Z])/g, function($1) {\n    return '-' + $1.toLowerCase();\n  });\n\n  return str.replace(/\\s/g, '-').replace(/^-+/g, '');\n};\n\n/**\n * convert a hyphenated string to camelCase\n * @param  {String} str\n * @return {String}\n */\nfbUtils.camelCase = (str) => {\n  return str.replace(/-([a-z])/g, function(m, w) {\n    return w.toUpperCase();\n  });\n};\n\n/**\n * Generate markup wrapper where needed\n *\n * @param  {string}              tag\n * @param  {String|Array|Object} content we wrap this\n * @param  {Object}              attrs\n * @return {String}\n */\nfbUtils.markup = function(tag, content = '', attrs = {}) {\n  let contentType,\n    field = document.createElement(tag),\n    getContentType = function(content) {\n      return Array.isArray(content) ? 'array' : typeof content;\n    },\n    appendContent = {\n      string: function(content) {\n        field.innerHTML = content;\n      },\n      object: function(content) {\n        return field.appendChild(content);\n      },\n      array: function(content) {\n        for (var i = 0; i < content.length; i++) {\n          contentType = getContentType(content[i]);\n          appendContent[contentType](content[i]);\n        }\n      }\n    };\n\n  for (var attr in attrs) {\n    if (attrs.hasOwnProperty(attr)) {\n      let name = fbUtils.safeAttrName(attr);\n      field.setAttribute(name, attrs[attr]);\n    }\n  }\n\n  contentType = getContentType(content);\n\n  if (content) {\n    appendContent[contentType].call(this, content);\n  }\n\n  return field;\n};\n\n/**\n * Convert html element attributes to key/value object\n * @param  {DOM Object} DOM element\n * @return {Object}     ex: {attrName: attrValue}\n */\nfbUtils.parseAttrs = function(elem) {\n  var attrs = elem.attributes;\n  var data = {};\n\n  for (var attr in attrs) {\n    if (attrs.hasOwnProperty(attr)) {\n      data[attrs[attr].name] = attrs[attr].value;\n    }\n  }\n\n  return data;\n};\n\n/**\n * Convert field options to optionData\n * @param  {DOM Object} DOM element\n * @return {Array}      optionData array\n */\nfbUtils.parseOptions = function(field) {\n  let options = field.getElementsByTagName('option'),\n    optionData = {},\n    data = [];\n\n  if (options.length) {\n    for (var i = 0; i < options.length; i++) {\n      optionData = fbUtils.parseAttrs(options[i]);\n      optionData.label = options[i].textContent;\n      data.push(optionData);\n    }\n  }\n\n  return data;\n};\n\n/**\n * Parse XML formData\n * @param  {String} xmlString\n * @return {Array}            formData array\n */\nfbUtils.parseXML = function(xmlString) {\n  const parser = new window.DOMParser();\n  let xml = parser.parseFromString(xmlString, 'text/xml'),\n    formData = [];\n\n  if (xml) {\n    var fields = xml.getElementsByTagName('field');\n    for (var i = 0; i < fields.length; i++) {\n      let fieldData = fbUtils.parseAttrs(fields[i]);\n      fieldData.values = fbUtils.parseOptions(fields[i]);\n      formData.push(fieldData);\n    }\n  }\n\n  return formData;\n};\n\n/**\n * Escape markup so it can be displayed rather than rendered\n * @param  {String} html markup\n * @return {String}      escaped html\n */\nfbUtils.escapeHtml = function(html) {\n  var escapeElement = document.createElement('textarea');\n  escapeElement.textContent = html;\n  return escapeElement.innerHTML;\n};\n\n// Escape an attribute\nfbUtils.escapeAttr = function(str) {\n  var match = {\n    '\"': '&quot;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n  };\n\n  function replaceTag(tag) {\n    return match[tag] || tag;\n  }\n\n  return (typeof str === 'string') ? str.replace(/[\"&<>]/g, replaceTag) : str;\n};\n\n// Escape attributes\nfbUtils.escapeAttrs = function(attrs) {\n  for (var attr in attrs) {\n    if (attrs.hasOwnProperty(attr)) {\n      attrs[attr] = fbUtils.escapeAttr(attrs[attr]);\n    }\n  }\n\n  return attrs;\n};\n\n// forEach that can be used on nodeList\nfbUtils.forEach = function(array, callback, scope) {\n  for (var i = 0; i < array.length; i++) {\n    callback.call(scope, i, array[i]); // passes back stuff we need\n  }\n};\n\n/**\n * Remove duplicates from an array of elements\n * @param  {Array} arrArg array with possible duplicates\n * @return {Array}        array with only unique values\n */\nfbUtils.unique = function(array) {\n  return array.filter((elem, pos, arr) => {\n    return arr.indexOf(elem) === pos;\n  });\n};\n"],"sourceRoot":"/source/"}